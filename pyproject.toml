[tool.poetry]
name = "algokit-utils"
version = "4.0.1"
description = "Utilities for Algorand development for use by AlgoKit"
authors = ["Algorand Foundation <contact@algorand.foundation>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
py-algorand-sdk = "^2.4.0"
httpx = ">=0.23.1,<=0.28.1"
typing-extensions = ">=4.6.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8"
ruff = ">=0.1.6,<=0.11.8"
pip-audit = "^2.5.6"
pytest-mock = "^3.14"
mypy = "^1.5.1"
python-semantic-release = ">=7.34.3,<11.0.0"
pytest-cov = "^6"
pre-commit = "^3.4.0"
python-dotenv = "^1.0.0"
sphinx = "^8.0.0"
poethepoet = ">=0.19,<0.35"
pytest-httpx = "^0.35.0"
pytest-xdist = "^3.6.1"
linkify-it-py = "^2.0.3"
setuptools = "^80.9.0"
pydoclint = "^0.6.0"
pytest-sugar = "^1.0.0"
types-deprecated = "^1.2.15.20241117"
sphinx-autobuild = "^2024.10.3"
furo = "^2024.8.6"
myst-parser = "^4.0.0"
sphinx-autoapi = "^3.4.0"
sphinx-markdown-builder = "^0.6.8"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
lint.select = [
  # all possible codes as of this ruff version are listed here,
  # ones we don't want/need are commented out to make it clear
  # which have been omitted on purpose vs which ones get added
  # in new ruff releases and should be considered for enabling
  "F",      # pyflakes
  "E", "W", # pycodestyle
  "C90",    # mccabe
  "I",      # isort
  "N",      # PEP8 naming
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
  "ANN",    # flake8-annotations
  # "S",    # flake8-bandit
  # "BLE",  # flake8-blind-except
  "FBT",    # flake8-boolean-trap
  "B",      # flake8-bugbear
  "A",      # flake8-builtins
  # "COM",  # flake8-commas
  "C4",     # flake8-comprehensions
  "DTZ",    # flake8-datetimez
  "T10",    # flake8-debugger
  # "DJ",   # flake8-django
  # "EM",   # flake8-errmsg
  # "EXE",  # flake8-executable
  "ISC",    # flake8-implicit-str-concat
  "ICN",    # flake8-import-conventions
  # "G",    # flake8-logging-format
  # "INP",  # flake8-no-pep420
  "PIE",    # flake8-pie
  "T20",    # flake8-print
  "PYI",    # flake8-pyi
  "PT",     # flake8-pytest-style
  "Q",      # flake8-quotes
  "RSE",    # flake8-raise
  "RET",    # flake8-return
  "SLF",    # flake8-self
  "SIM",    # flake8-simplify
  "TID",    # flake8-tidy-imports
  "ARG",    # flake8-unused-arguments
  "PTH",    # flake8-use-pathlib
  "ERA",    # eradicate
  # "PD",   # pandas-vet
  "PGH",    # pygrep-hooks
  "PL",     # pylint
  # "TRY",  # tryceratops
  # "NPY",  # NumPy-specific rules
  "RUF",    # Ruff-specific rules
]
lint.ignore = [
  "RET505", # allow else after return
  "SIM108", # allow if-else in place of ternary
  "E111", # indentation is not a multiple of four
  "E117", # over-indented
  "ISC001", # single line implicit string concatenation
  "ISC002", # multi line implicit string concatenation
  "Q000", # bad quotes inline string
  "Q001", # bad quotes multiline string
  "Q002", # bad quotes docstring
  "Q003", # avoidable escaped quotes
  "W191", # indentation contains tabs
  "ERA001", # commented out code
]
# Exclude a variety of commonly ignored directories.
extend-exclude = [
  "docs",
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  "tests/artifacts",
]
# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

[tool.ruff.lint.per-file-ignores]
"src/algokit_utils/applications/app_client.py" = ["SLF001"]
"src/algokit_utils/applications/app_factory.py" = ["SLF001"]
"tests/clients/test_algorand_client.py" = ["ERA001"]  
"src/algokit_utils/_legacy_v2/**/*" = ["E501"]
"tests/**/*" = ["PLR2004"]  
"src/algokit_utils/__init__.py" = ["I001", "RUF022"]  # Ignore import sorting for __init__.py

[tool.poe.tasks]
docs = ["docs-html-only", "docs-md-only"]
docs-md-only = "sphinx-build docs/source docs/markdown -b markdown"
docs-html-only = "sphinx-build docs/source docs/html"
docstrings-check = "pydoclint src --style sphinx --arg-type-hints-in-docstring false --check-return-types false --exclude src/algokit_utils/_legacy_v2"
docs-dev = "sphinx-autobuild --ignore '**/_build/**' --ignore '**/autoapi/**' --ignore '**/.doctrees/**' docs/source docs/_build"

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
norecursedirs = ["src"]  # Ignore test collection in source directory, otherwise picks up TestNet* prefixed abstractions
filterwarnings = [
    # Ignore deprecations in utils legacy v2 is removed
    "ignore::DeprecationWarning",
]

[tool.mypy]
files = ["src", "tests"]
exclude = ["dist", "tests/artifacts", "src/algokit_utils/_legacy_v2"]
python_version = "3.10"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true

untyped_calls_exclude = [
    "algosdk",
]

[[tool.mypy.overrides]]
module = ["algosdk", "algosdk.*"]
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = ["tests.transactions.test_transaction_composer"]
disable_error_code = ["call-overload", "union-attr"]

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
remove_dist = false
build_command = "poetry build --format wheel"
version_source = "tag"
major_on_zero = true
upload_to_repository = false
tag_commit = true
branch = "main"
commit_message = "{version}\n\nskip-checks: true"
