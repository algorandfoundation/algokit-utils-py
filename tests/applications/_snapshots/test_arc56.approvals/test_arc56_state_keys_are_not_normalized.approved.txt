{
    "arcs": [
        22,
        28
    ],
    "bareActions": {
        "call": [
            "DeleteApplication",
            "UpdateApplication"
        ],
        "create": [
            "NoOp",
            "OptIn"
        ]
    },
    "methods": [
        {
            "actions": {
                "call": [],
                "create": [
                    "NoOp"
                ]
            },
            "args": [
                {
                    "type": "string",
                    "name": "input"
                }
            ],
            "name": "create_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "UpdateApplication"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "input"
                }
            ],
            "name": "update_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "DeleteApplication"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "input"
                }
            ],
            "name": "delete_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "OptIn"
                ],
                "create": []
            },
            "args": [],
            "name": "opt_in",
            "returns": {
                "type": "void"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [],
            "name": "error",
            "returns": {
                "type": "void"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "name": "call_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "pay",
                    "name": "txn"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "name": "call_abi_txn",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "account"
                },
                {
                    "type": "application",
                    "name": "application"
                }
            ],
            "name": "call_with_references",
            "returns": {
                "type": "uint64"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "defaultValue": {
                        "data": "AA1kZWZhdWx0IHZhbHVl",
                        "source": "literal",
                        "type": "string"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "uint64",
                    "defaultValue": {
                        "data": "AAAAAAAAAHs=",
                        "source": "literal",
                        "type": "uint64"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value_int",
            "returns": {
                "type": "uint64"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "defaultValue": {
                        "data": "AA1kZWZhdWx0IHZhbHVl",
                        "source": "literal",
                        "type": "string"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value_from_abi",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "uint64",
                    "defaultValue": {
                        "data": "aW50MQ==",
                        "source": "global",
                        "type": "AVMString"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value_from_global_state",
            "returns": {
                "type": "uint64"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "string",
                    "defaultValue": {
                        "data": "bG9jYWxfYnl0ZXMx",
                        "source": "local",
                        "type": "AVMString"
                    },
                    "name": "arg_with_default"
                }
            ],
            "name": "default_value_from_local_state",
            "returns": {
                "type": "string"
            },
            "events": [],
            "readonly": true,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "(string,uint64)",
                    "name": "name_age",
                    "struct": "Input"
                }
            ],
            "name": "structs",
            "returns": {
                "type": "(string,uint64)",
                "struct": "Output"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "uint64",
                    "name": "int1"
                },
                {
                    "type": "uint64",
                    "name": "int2"
                },
                {
                    "type": "string",
                    "name": "bytes1"
                },
                {
                    "type": "byte[4]",
                    "name": "bytes2"
                }
            ],
            "name": "set_global",
            "returns": {
                "type": "void"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "uint64",
                    "name": "int1"
                },
                {
                    "type": "uint64",
                    "name": "int2"
                },
                {
                    "type": "string",
                    "name": "bytes1"
                },
                {
                    "type": "byte[4]",
                    "name": "bytes2"
                }
            ],
            "name": "set_local",
            "returns": {
                "type": "void"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        },
        {
            "actions": {
                "call": [
                    "NoOp"
                ],
                "create": []
            },
            "args": [
                {
                    "type": "byte[4]",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "value"
                }
            ],
            "name": "set_box",
            "returns": {
                "type": "void"
            },
            "events": [],
            "readonly": false,
            "recommendations": {}
        }
    ],
    "name": "State",
    "state": {
        "keys": {
            "box": {
                "boxNotInSnakeCase": {
                    "key": "YQ==",
                    "keyType": "AVMBytes",
                    "valueType": "string"
                }
            },
            "global": {
                "value": {
                    "key": "dmFsdWU=",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                },
                "bytes1": {
                    "key": "Ynl0ZXMx",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "bytes2": {
                    "key": "Ynl0ZXMy",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "bytesNotInSnakeCase": {
                    "key": "Ynl0ZXNOb3RJblNuYWtlQ2FzZQ==",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "int1": {
                    "key": "aW50MQ==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                },
                "int2": {
                    "key": "aW50Mg==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                }
            },
            "local": {
                "local_bytes1": {
                    "key": "bG9jYWxfYnl0ZXMx",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "local_bytes2": {
                    "key": "bG9jYWxfYnl0ZXMy",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "localBytesNotInSnakeCase": {
                    "key": "bG9jYWxCeXRlc05vdEluU25ha2VDYXNl",
                    "keyType": "AVMString",
                    "valueType": "AVMBytes"
                },
                "local_int1": {
                    "key": "bG9jYWxfaW50MQ==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                },
                "local_int2": {
                    "key": "bG9jYWxfaW50Mg==",
                    "keyType": "AVMString",
                    "valueType": "AVMUint64"
                }
            }
        },
        "maps": {
            "box": {
                "box": {
                    "keyType": "byte[4]",
                    "valueType": "string",
                    "prefix": ""
                },
                "boxMapNotInSnakeCase": {
                    "keyType": "byte[4]",
                    "valueType": "string",
                    "prefix": "Yg=="
                }
            },
            "global": {},
            "local": {}
        },
        "schema": {
            "global": {
                "bytes": 3,
                "ints": 3
            },
            "local": {
                "bytes": 3,
                "ints": 2
            }
        }
    },
    "structs": {
        "Input": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "age",
                "type": "uint64"
            }
        ],
        "Output": [
            {
                "name": "message",
                "type": "string"
            },
            {
                "name": "result",
                "type": "uint64"
            }
        ]
    },
    "byteCode": {
        "approval": "CiAFAQAAAAAmAwQVH3x1B0hlbGxvLCAAMRtBAg+CEQSdUjBABDylzrcEJxtO6QQwxtWKBETQ2g0E8X6ApQQKkqgeBP798R4EV0tVyAQ2A2LpBEbSEaMEDPy7AATQ8Lr4BCRr64MEpM+N6gTOwoNKBKS0ojA2GgCOEQFyAVIBMgEoASABAgDaALcAqACZAIYAdwBhAE4AMQAUAAIjQzEZFEQxGEQ2GgE2GgKIAvAiQzEZFEQxGEQ2GgEXNhoCFzYaA1cCADYaBIgChyJDMRkURDEYRDYaARc2GgIXNhoDVwIANhoEiAI+IkMxGRREMRhENhoBiAH/KExQsCJDMRkURDEYRDYaAVcCAIgByyhMULAiQzEZFEQxGEQoNhoBULAiQzEZFEQxGEQ2GgGIAY8oTFCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhEKDYaAVCwIkMxGRREMRhENhoBF8AwNhoCF8AcNhoDF8AyiAE+FihMULAiQzEZFEQxGEQxFiIJSTgQIhJENhoBVwIAiAEBSRUWVwYCTFAoTFCwIkMxGRREMRhENhoBVwIAiADbSRUWVwYCTFAoTFCwIkMxGRREMRhEADEZIhJEMRhEIkMxGYEFEkQxGEQ2GgFXAgCIAJ5JFRZXBgJMUChMULAiQzEZgQQSRDEYRDYaAVcCAIgAc0kVFlcGAkxQKExQsCJDMRkURDEYFEQ2GgFXAgCIAEtJFRZXBgJMUChMULAiQzEZjQYAEwAT/l/+XwALAANC/lwxGESIAW4iQzEYRIgBXSJDMRgURIgAAiJDigAAiAFegAV2YWx1ZSEEZ4mKAQGIAU2L/4mKAQGIAUQkRIv/iYoBAYgBOSVEi/+JigEBKYv/UImKAgGL/jgIiAEsgAVTZW50IExQgAIuIFCL/1CJigMBi/1Ei/4yAxNEi/9EIomKAQGL/1cCAIAFQUJJLCBMUEkVFlcGAkxQiYoBAYANTG9jYWwgc3RhdGUsIIv/UEkVFlcGAkxQiYoBAYv/I1mL/xWL/04CUlcCAClMUEkVFlcGAkxQi/9XAggXgQILFoACAApMUExQiYoEAIAEaW50MYv8Z4AEaW50Mov9Z4AGYnl0ZXMxi/5ngAZieXRlczKL/2eJigQAMQCACmxvY2FsX2ludDGL/GYxAIAKbG9jYWxfaW50Mov9ZjEAgAxsb2NhbF9ieXRlczGL/mYxAIAMbG9jYWxfYnl0ZXMyi/9miYoCAIv+vEiL/ov/v4mKAAAkRIgAComKAAAlRIgAAYmKAAAxADIJEkSJigEBKov/QAAFgAEwTImL/4EKCkmMAEEAHIsAiP/ii/+BChiACjAxMjM0NTY3ODlMIlhQTIkqQv/l",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 3,
            "patch": 3
        }
    },
    "events": [],
    "networks": {},
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "sourceInfo": {
        "approval": {
            "pcOffsetMethod": "cblocks",
            "sourceInfo": [
                {
                    "pc": [
                        620,
                        927
                    ],
                    "errorMessage": "Check app is deletable"
                },
                {
                    "pc": [
                        609,
                        918
                    ],
                    "errorMessage": "Check app is updatable"
                },
                {
                    "pc": [
                        426
                    ],
                    "errorMessage": "Deliberate error"
                },
                {
                    "pc": [
                        764
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        442
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        136,
                        154,
                        183,
                        212,
                        231,
                        253,
                        268,
                        287,
                        302,
                        317,
                        352,
                        392,
                        422,
                        504
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        431
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        474
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        671
                    ],
                    "errorMessage": "account not provided"
                },
                {
                    "pc": [
                        674
                    ],
                    "errorMessage": "application not provided"
                },
                {
                    "pc": [
                        665
                    ],
                    "errorMessage": "asset not provided"
                },
                {
                    "pc": [
                        508,
                        570
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        139,
                        157,
                        186,
                        215,
                        234,
                        256,
                        271,
                        290,
                        305,
                        320,
                        355,
                        395,
                        425,
                        434,
                        445,
                        477,
                        553,
                        561
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        365
                    ],
                    "errorMessage": "transaction type is pay"
                },
                {
                    "pc": [
                        940
                    ],
                    "errorMessage": "unauthorized"
                }
            ]
        },
        "clear": {
            "pcOffsetMethod": "none",
            "sourceInfo": []
        }
    },
    "templateVariables": {
        "UPDATABLE": {
            "type": "AVMUint64"
        },
        "DELETABLE": {
            "type": "AVMUint64"
        },
        "VALUE": {
            "type": "AVMUint64"
        }
    }
}