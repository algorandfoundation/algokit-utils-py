{
    "name": "InnerFeeContract",
    "structs": {},
    "methods": [
        {
            "name": "burn_ops_readonly",
            "args": [
                {
                    "type": "uint64",
                    "name": "op_budget"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn_ops",
            "args": [
                {
                    "type": "uint64",
                    "name": "op_budget"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "no_op",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "send_x_inners_with_fees",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_id"
                },
                {
                    "type": "uint64[]",
                    "name": "fees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "send_inners_with_fees",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_id_1"
                },
                {
                    "type": "uint64",
                    "name": "app_id_2"
                },
                {
                    "type": "(uint64,uint64,uint64,uint64,uint64[])",
                    "name": "fees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "send_inners_with_fees_2",
            "args": [
                {
                    "type": "uint64",
                    "name": "app_id_1"
                },
                {
                    "type": "uint64",
                    "name": "app_id_2"
                },
                {
                    "type": "(uint64,uint64,uint64[],uint64,uint64,uint64[])",
                    "name": "fees"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        298,
                        328,
                        348,
                        368,
                        388,
                        433,
                        453,
                        501,
                        521
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        77,
                        100,
                        123,
                        142,
                        151,
                        167
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        188
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        80,
                        103,
                        126,
                        145,
                        154,
                        170
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAQAGPCYEBHcp6zIEwsSJ5QADBoEBMRtBAJeCAgSdiSnHBN03gkcoKYICBDQ2gs0EHPL1kDYaAI4GAFwATABDADAAGQACI0MxGRREMRhENhoBFzYaAhc2GgOIAUwiQzEZFEQxGEQ2GgEXNhoCFzYaA4gAzCJDMRkURDEYRDYaARc2GgKIAIIiQzEZFEQxGEQiQzEZFEQxGEQ2GgEXiABDIkMxGRREMRhENhoBF4gADSJDMRlA/48xGBREIkOKAQCL/yUKi/8jiAFfI4sBiwAMQQAPiwFJFpYqp0QiCIwBQv/piYoBAIv/JQqL/yOIATkjiwGLAAxBAA+LAUkWliqnRCIIjAFC/+mJigIAi/8jWSOLAYsADEEAJov/VwIAiwFJTgKBCAuBCFixF4v+shgoshokshCyAbMiCIwBQv/SiYoDALGL/1cACBeL/bIYKLIaJLIQsgGzsYv/VwgIF4v9shgoshokshCyAbOxi/9XEAgXMgqyByOyCCKyELIBs7GL/1cYCBeL/haL/4EgWYv/FYv/TgJSi/2yGCmyGkyyGrIaJLIQsgGziYoDALGL/1cACBeL/bIYKLIaJLIQsgGzsYv/VwgIF4v+Fov/gRBZi/+BIlmL/08CSwJSi/2yGCmyGksCshqyGiSyEE8CsgGzsYv/VxIIF4v9shgoshokshCyAbOxi/9XGggXi/8Vi/9PA08CUov9shgpshpPArIashokshCyAbOJigIAi/6BCgiLADIMDUEAJ7EkshCBBbIZK7IeK7Ifi/+NAgALAASzQv/eMgCyAUL/9SOyAUL/74k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 1,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}
