algokit_utils.clients.dispenser_api_client
==========================================

.. py:module:: algokit_utils.clients.dispenser_api_client


Attributes
----------

.. autoapisummary::

   algokit_utils.clients.dispenser_api_client.DISPENSER_ASSETS
   algokit_utils.clients.dispenser_api_client.DISPENSER_REQUEST_TIMEOUT
   algokit_utils.clients.dispenser_api_client.DISPENSER_ACCESS_TOKEN_KEY


Classes
-------

.. autoapisummary::

   algokit_utils.clients.dispenser_api_client.DispenserApiConfig
   algokit_utils.clients.dispenser_api_client.DispenserAssetName
   algokit_utils.clients.dispenser_api_client.DispenserAsset
   algokit_utils.clients.dispenser_api_client.DispenserFundResponse
   algokit_utils.clients.dispenser_api_client.DispenserLimitResponse
   algokit_utils.clients.dispenser_api_client.TestNetDispenserApiClient


Module Contents
---------------

.. py:class:: DispenserApiConfig

   .. py:attribute:: BASE_URL
      :value: 'https://api.dispenser.algorandfoundation.tools'



.. py:class:: DispenserAssetName

   Bases: :py:obj:`enum.IntEnum`


   Enum where members are also (and must be) ints


   .. py:attribute:: ALGO
      :value: 0



.. py:class:: DispenserAsset

   .. py:attribute:: asset_id
      :type:  int

      The ID of the asset



   .. py:attribute:: decimals
      :type:  int

      The amount of decimal places the asset was created with



   .. py:attribute:: description
      :type:  str

      The description of the asset



.. py:class:: DispenserFundResponse

   .. py:attribute:: tx_id
      :type:  str

      The transaction ID of the funded transaction



   .. py:attribute:: amount
      :type:  int

      The amount of Algos funded



.. py:class:: DispenserLimitResponse

   .. py:attribute:: amount
      :type:  int

      The amount of Algos that can be funded



.. py:data:: DISPENSER_ASSETS

.. py:data:: DISPENSER_REQUEST_TIMEOUT
   :value: 15


.. py:data:: DISPENSER_ACCESS_TOKEN_KEY
   :value: 'ALGOKIT_DISPENSER_ACCESS_TOKEN'


.. py:class:: TestNetDispenserApiClient(auth_token: str | None = None, request_timeout: int = DISPENSER_REQUEST_TIMEOUT)

   Client for interacting with the [AlgoKit TestNet Dispenser API](https://github.com/algorandfoundation/algokit/blob/main/docs/testnet_api.md).
   To get started create a new access token via `algokit dispenser login --ci`
   and pass it to the client constructor as `auth_token`.
   Alternatively set the access token as environment variable `ALGOKIT_DISPENSER_ACCESS_TOKEN`,
   and it will be auto loaded. If both are set, the constructor argument takes precedence.

   Default request timeout is 15 seconds. Modify by passing `request_timeout` to the constructor.


   .. py:attribute:: auth_token
      :type:  str


   .. py:attribute:: request_timeout
      :value: 15



   .. py:method:: fund(address: str, amount: int) -> DispenserFundResponse
                  fund(address: str, amount: int, asset_id: int | None = None) -> DispenserFundResponse

      Fund an account with Algos from the dispenser API

      :param address: The address to fund
      :param amount: The amount of Algos to fund
      :param asset_id: The asset ID to fund (deprecated)
      :return: The transaction ID of the funded transaction
      :raises Exception: If the dispenser API request fails

      :example:
          >>> dispenser_client = TestNetDispenserApiClient()
          >>> dispenser_client.fund(address="SENDER_ADDRESS", amount=1000000)



   .. py:method:: refund(refund_txn_id: str) -> None

      Register a refund for a transaction with the dispenser API



   .. py:method:: get_limit(address: str) -> DispenserLimitResponse

      Get current limit for an account with Algos from the dispenser API



