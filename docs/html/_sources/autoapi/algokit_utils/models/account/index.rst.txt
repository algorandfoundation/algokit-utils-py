algokit_utils.models.account
============================

.. py:module:: algokit_utils.models.account


Attributes
----------

.. autoapisummary::

   algokit_utils.models.account.DISPENSER_ACCOUNT_NAME


Classes
-------

.. autoapisummary::

   algokit_utils.models.account.TransactionSignerAccount
   algokit_utils.models.account.SigningAccount
   algokit_utils.models.account.MultisigMetadata
   algokit_utils.models.account.MultiSigAccount
   algokit_utils.models.account.LogicSigAccount


Module Contents
---------------

.. py:data:: DISPENSER_ACCOUNT_NAME
   :value: 'DISPENSER'


.. py:class:: TransactionSignerAccount

   A basic transaction signer account.


   .. py:attribute:: address
      :type:  str


   .. py:attribute:: signer
      :type:  algosdk.atomic_transaction_composer.TransactionSigner


.. py:class:: SigningAccount

   Holds the private key and address for an account.

   Provides access to the account's private key, address, public key and transaction signer.


   .. py:attribute:: private_key
      :type:  str

      Base64 encoded private key



   .. py:attribute:: address
      :type:  str
      :value: ''


      Address for this account



   .. py:property:: public_key
      :type: bytes


      The public key for this account.

      :return: The public key as bytes



   .. py:property:: signer
      :type: algosdk.atomic_transaction_composer.AccountTransactionSigner


      Get an AccountTransactionSigner for this account.

      :return: A transaction signer for this account



   .. py:method:: new_account() -> SigningAccount
      :staticmethod:


      Create a new random account.

      :return: A new Account instance



.. py:class:: MultisigMetadata

   Metadata for a multisig account.

   Contains the version, threshold and addresses for a multisig account.


   .. py:attribute:: version
      :type:  int


   .. py:attribute:: threshold
      :type:  int


   .. py:attribute:: addresses
      :type:  list[str]


.. py:class:: MultiSigAccount(multisig_params: MultisigMetadata, signing_accounts: list[SigningAccount])

   Account wrapper that supports partial or full multisig signing.

   Provides functionality to manage and sign transactions for a multisig account.

   :param multisig_params: The parameters for the multisig account
   :param signing_accounts: The list of accounts that can sign


   .. py:property:: multisig
      :type: algosdk.transaction.Multisig


      Get the underlying `algosdk.transaction.Multisig` object instance.

      :return: The `algosdk.transaction.Multisig` object instance



   .. py:property:: params
      :type: MultisigMetadata


      Get the parameters for the multisig account.

      :return: The multisig account parameters



   .. py:property:: signing_accounts
      :type: list[SigningAccount]


      Get the list of accounts that are present to sign.

      :return: The list of signing accounts



   .. py:property:: address
      :type: str


      Get the address of the multisig account.

      :return: The multisig account address



   .. py:property:: signer
      :type: algosdk.atomic_transaction_composer.TransactionSigner


      Get the transaction signer for this multisig account.

      :return: The multisig transaction signer



   .. py:method:: sign(transaction: algosdk.transaction.Transaction) -> algosdk.transaction.MultisigTransaction

      Sign the given transaction with all present signers.

      :param transaction: Either a transaction object or a raw, partially signed transaction
      :return: The transaction signed by the present signers



.. py:class:: LogicSigAccount(program: bytes, args: list[bytes] | None)

   Account wrapper that supports logic sig signing.

   Provides functionality to manage and sign transactions for a logic sig account.


   .. py:property:: lsig
      :type: algosdk.transaction.LogicSigAccount


      Get the underlying `algosdk.transaction.LogicSigAccount` object instance.

      :return: The `algosdk.transaction.LogicSigAccount` object instance



   .. py:property:: address
      :type: str


      Get the address of the logic sig account.

      If the LogicSig is delegated to another account, this will return the address of that account.

      If the LogicSig is not delegated to another account, this will return an escrow address that is the hash of
      the LogicSig's program code.

      :return: The logic sig account address



   .. py:property:: signer
      :type: algosdk.atomic_transaction_composer.LogicSigTransactionSigner


      Get the transaction signer for this multisig account.

      :return: The multisig transaction signer



