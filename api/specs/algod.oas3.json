{
  "openapi": "3.0.1",
  "info": {
    "title": "Algod REST API.",
    "description": "API endpoint for algod operations.",
    "contact": {
      "name": "algorand",
      "url": "https://www.algorand.com/get-in-touch/contact",
      "email": "contact@algorand.com"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost/"
    },
    {
      "url": "https://localhost/"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "private"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "summary": "Returns OK if healthy.",
        "operationId": "HealthCheck",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {}
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/ready": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "summary": "Returns OK if healthy and fully caught up.",
        "operationId": "GetReady",
        "responses": {
          "200": {
            "description": "OK.",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {}
          },
          "503": {
            "description": "Node not ready yet",
            "content": {}
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "summary": "Return metrics about algod functioning.",
        "operationId": "Metrics",
        "responses": {
          "200": {
            "description": "text with \\#-comments and key:value lines",
            "content": {}
          },
          "404": {
            "description": "metrics were compiled out",
            "content": {}
          }
        }
      }
    },
    "/genesis": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "summary": "Gets the genesis information.",
        "description": "Returns the entire genesis file in json.",
        "operationId": "GetGenesis",
        "responses": {
          "200": {
            "description": "The genesis file in json.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Genesis"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/swagger.json": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "summary": "Gets the current swagger spec.",
        "description": "Returns the entire swagger spec in json.",
        "operationId": "SwaggerJSON",
        "responses": {
          "200": {
            "description": "The current swagger spec",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/versions": {
      "get": {
        "tags": [
          "public",
          "common"
        ],
        "description": "Retrieves the supported API versions, binary build versions, and genesis information.",
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "description": "VersionsResponse is the response to 'GET /versions'",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        }
      }
    },
    "/debug/settings/pprof": {
      "get": {
        "tags": [
          "private"
        ],
        "description": "Retrieves the current settings for blocking and mutex profiles",
        "operationId": "GetDebugSettingsProf",
        "responses": {
          "200": {
            "description": "DebugPprof is the response to the /debug/extra/pprof endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugSettingsProf"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "private"
        ],
        "description": "Enables blocking and mutex profiles, and returns the old settings",
        "operationId": "PutDebugSettingsProf",
        "responses": {
          "200": {
            "description": "DebugPprof is the response to the /debug/extra/pprof endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugSettingsProf"
                }
              }
            }
          }
        }
      }
    },
    "/debug/settings/config": {
      "get": {
        "tags": [
          "private"
        ],
        "summary": "Gets the merged config file.",
        "description": "Returns the merged (defaults + overrides) config file in json.",
        "operationId": "GetConfig",
        "responses": {
          "200": {
            "description": "The merged config file in json.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/accounts/{address}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get account information.",
        "description": "Given a specific account public key, this call returns the account's status, balance and spendable amounts",
        "operationId": "AccountInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string",
              "x-go-type": "basics.Address"
            },
            "x-go-type": "basics.Address"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "none"
              ]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "json"
              ],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountResponse wraps the Account type in a response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/accounts/{address}/assets/{asset-id}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get account information about a given asset.",
        "description": "Given a specific account public key and asset ID, this call returns the account's asset holding and asset parameters (if either exist). Asset parameters will only be returned if the provided address is the asset's creator.",
        "operationId": "AccountAssetInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string",
              "x-go-type": "basics.Address"
            },
            "x-go-type": "basics.Address"
          },
          {
            "name": "asset-id",
            "in": "path",
            "description": "An asset identifier.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.AssetIndex"
            },
            "x-go-type": "basics.AssetIndex"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "json"
              ],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "round"
                  ],
                  "type": "object",
                  "properties": {
                    "round": {
                      "type": "integer",
                      "description": "The round for which this information is relevant.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "asset-holding": {
                      "$ref": "#/components/schemas/AssetHolding"
                    },
                    "created-asset": {
                      "$ref": "#/components/schemas/AssetParams"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed address or asset ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/accounts/{address}/assets": {
      "get": {
        "tags": [
          "public",
          "experimental"
        ],
        "summary": "Get a list of assets held by an account, inclusive of asset params.",
        "description": "Lookup an account's asset holdings.",
        "operationId": "AccountAssetsInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string",
              "x-go-type": "basics.Address"
            },
            "x-go-type": "basics.Address"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of results to return.",
            "schema": {
              "type": "integer",
              "x-algokit-bigint": true
            },
            "x-algokit-bigint": true
          },
          {
            "name": "next",
            "in": "query",
            "description": "The next page of results. Use the next token provided by the previous results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountAssetsInformationResponse contains a list of assets held by an account.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "round"
                  ],
                  "type": "object",
                  "properties": {
                    "round": {
                      "type": "integer",
                      "description": "The round for which this information is relevant.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "next-token": {
                      "type": "string",
                      "description": "Used for pagination, when making another request provide this token with the next parameter."
                    },
                    "asset-holdings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountAssetHolding"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/accounts/{address}/applications/{application-id}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get account information about a given app.",
        "description": "Given a specific account public key and application ID, this call returns the account's application local state and global state (AppLocalState and AppParams, if either exists). Global state will only be returned if the provided address is the application's creator.",
        "operationId": "AccountApplicationInformation",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string",
              "x-go-type": "basics.Address"
            },
            "x-go-type": "basics.Address"
          },
          {
            "name": "application-id",
            "in": "path",
            "description": "An application identifier.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.AppIndex"
            },
            "x-go-type": "basics.AppIndex"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "msgpack"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "round"
                  ],
                  "type": "object",
                  "properties": {
                    "round": {
                      "type": "integer",
                      "description": "The round for which this information is relevant.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "app-local-state": {
                      "$ref": "#/components/schemas/ApplicationLocalState"
                    },
                    "created-app": {
                      "$ref": "#/components/schemas/ApplicationParams"
                    }
                  }
                }
              },
              "application/msgpack": {
                "schema": {
                  "required": [
                    "round"
                  ],
                  "type": "object",
                  "properties": {
                    "round": {
                      "type": "integer",
                      "description": "The round for which this information is relevant.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "app-local-state": {
                      "$ref": "#/components/schemas/ApplicationLocalState"
                    },
                    "created-app": {
                      "$ref": "#/components/schemas/ApplicationParams"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Malformed address or application ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/accounts/{address}/transactions/pending": {
      "get": {
        "tags": [
          "public",
          "participating"
        ],
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool by address.",
        "description": "Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "operationId": "GetPendingTransactionsByAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string",
              "x-go-type": "basics.Address"
            },
            "x-go-type": "basics.Address"
          },
          {
            "name": "max",
            "in": "query",
            "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "schema": {
              "type": "integer",
              "x-algokit-bigint": true
            },
            "x-algokit-bigint": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
            "content": {
              "application/msgpack": {
                "schema": {
                  "required": [
                    "top-transactions",
                    "total-transactions"
                  ],
                  "type": "object",
                  "properties": {
                    "top-transactions": {
                      "type": "array",
                      "description": "An array of signed transaction objects.",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "x-algokit-signed-txn": true
                      }
                    },
                    "total-transactions": {
                      "type": "integer",
                      "description": "Total number of transactions in the pool."
                    }
                  },
                  "description": "PendingTransactions is an array of signed transactions exactly as they were submitted."
                }
              }
            }
          },
          "400": {
            "description": "Max must be a non-negative integer",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/blocks/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get the block for the given round.",
        "operationId": "GetBlock",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          },
          {
            "name": "header-only",
            "in": "query",
            "description": "If true, only the block header (exclusive of payset or certificate) may be included in response.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Encoded block object.",
            "content": {
              "application/msgpack": {
                "schema": {
                  "required": [
                    "block"
                  ],
                  "type": "object",
                  "properties": {
                    "block": {
                      "type": "object",
                      "properties": {},
                      "description": "Block header data.",
                      "x-algorand-format": "BlockHeader"
                    },
                    "cert": {
                      "type": "object",
                      "properties": {},
                      "description": "Optional certificate object. This is only included when the format is set to message pack.",
                      "x-algorand-format": "BlockCertificate"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "None existing block ",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/blocks/{round}/txids": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get the top level transaction IDs for the block on the given round.",
        "operationId": "GetBlockTxids",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "description": "Top level transaction IDs in a block.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "blockTxids"
                  ],
                  "type": "object",
                  "properties": {
                    "blockTxids": {
                      "type": "array",
                      "description": "Block transaction IDs.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non existing block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/blocks/{round}/hash": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get the block hash for the block on the given round.",
        "operationId": "GetBlockHash",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "description": "Hash of a block header.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "blockHash"
                  ],
                  "type": "object",
                  "properties": {
                    "blockHash": {
                      "type": "string",
                      "description": "Block header hash."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "None existing block ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/blocks/{round}/transactions/{txid}/proof": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get a proof for a transaction in a block.",
        "operationId": "GetTransactionProof",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          },
          {
            "name": "txid",
            "in": "path",
            "description": "The transaction ID for which to generate a proof.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]+",
              "type": "string"
            }
          },
          {
            "name": "hashtype",
            "in": "query",
            "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256",
            "schema": {
              "type": "string",
              "enum": [
                "sha512_256",
                "sha256"
              ]
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "msgpack"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Proof of transaction in a block.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionProof"
                }
              }
            }
          },
          "400": {
            "description": "Malformed round number or transaction ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Non-existent block or transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal error, including protocol not supporting proofs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown error",
            "content": {}
          }
        }
      }
    },
    "/v2/blocks/{round}/logs": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get all of the logs from outer and inner app calls in the given round",
        "description": "Get all of the logs from outer and inner app calls in the given round",
        "operationId": "GetBlockLogs",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "description": "All logs emitted in the given round. Each app call, whether top-level or inner, that contains logs results in a separate AppCallLogs object. Therefore there may be multiple AppCallLogs with the same application ID and outer transaction ID in the event of multiple inner app calls to the same app. App calls with no logs are not included in the response. AppCallLogs are returned in the same order that their corresponding app call appeared in the block (pre-order traversal of inner app calls)",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "logs"
                  ],
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AppCallLogs"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Non integer number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Nonexistent block ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/ledger/supply": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get the current supply reported by the ledger.",
        "operationId": "GetSupply",
        "responses": {
          "200": {
            "description": "Supply represents the current supply of MicroAlgos in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "current_round",
                    "online-money",
                    "total-money"
                  ],
                  "type": "object",
                  "properties": {
                    "current_round": {
                      "type": "integer",
                      "description": "Round",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "online-money": {
                      "type": "integer",
                      "description": "OnlineMoney",
                      "x-algokit-bigint": true
                    },
                    "total-money": {
                      "type": "integer",
                      "description": "TotalMoney",
                      "x-algokit-bigint": true
                    }
                  },
                  "description": "Supply represents the current supply of MicroAlgos in the system"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/participation": {
      "get": {
        "tags": [
          "private",
          "participating"
        ],
        "summary": "Return a list of participation keys",
        "description": "Return a list of participation keys",
        "operationId": "GetParticipationKeys",
        "responses": {
          "200": {
            "description": "A list of participation keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParticipationKey"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "private",
          "participating"
        ],
        "summary": "Add a participation key to the node",
        "operationId": "AddParticipationKey",
        "requestBody": {
          "description": "The participation key to add to the node",
          "content": {
            "application/msgpack": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Participation ID of the submission",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "partId"
                  ],
                  "type": "object",
                  "properties": {
                    "partId": {
                      "type": "string",
                      "description": "encoding of the participation ID."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "participationkey"
      }
    },
    "/v2/participation/generate/{address}": {
      "post": {
        "tags": [
          "private",
          "participating"
        ],
        "summary": "Generate and install participation keys to the node.",
        "operationId": "GenerateParticipationKeys",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "An account public key.",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]{58}",
              "type": "string",
              "x-go-type": "basics.Address"
            },
            "x-go-type": "basics.Address"
          },
          {
            "name": "dilution",
            "in": "query",
            "description": "Key dilution for two-level participation keys (defaults to sqrt of validity window).",
            "schema": {
              "type": "integer",
              "format": "uint64",
              "x-algokit-bigint": true
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "First round for participation key.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "x-go-type": "basics.Round",
              "x-algokit-bigint": true
            },
            "x-go-type": "basics.Round"
          },
          {
            "name": "last",
            "in": "query",
            "description": "Last round for participation key.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "x-go-type": "basics.Round",
              "x-algokit-bigint": true
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "description": "An empty JSON object is returned if the generation process was started. Currently no status is available.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/participation/{participation-id}": {
      "get": {
        "tags": [
          "private",
          "participating"
        ],
        "summary": "Get participation key info given a participation ID",
        "description": "Given a participation ID, return information about that participation key",
        "operationId": "GetParticipationKeyByID",
        "parameters": [
          {
            "name": "participation-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A detailed description of a participation ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationKey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "private",
          "participating"
        ],
        "summary": "Append state proof keys to a participation key",
        "description": "Given a participation ID, append state proof keys to a particular set of participation keys",
        "operationId": "AppendKeys",
        "parameters": [
          {
            "name": "participation-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The state proof keys to add to an existing participation ID",
          "content": {
            "application/msgpack": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A detailed description of a participation ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationKey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "keymap"
      },
      "delete": {
        "tags": [
          "private",
          "participating"
        ],
        "summary": "Delete a given participation key by ID",
        "description": "Delete a given participation key by ID",
        "operationId": "DeleteParticipationKeyByID",
        "parameters": [
          {
            "name": "participation-id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Participation key got deleted by ID",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Participation Key Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/shutdown": {
      "post": {
        "tags": [
          "private",
          "nonparticipating"
        ],
        "description": "Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.",
        "operationId": "ShutdownNode",
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Node shutdown initiated successfully"
          }
        }
      }
    },
    "/v2/status": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Gets the current node status.",
        "operationId": "GetStatus",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "catchup-time",
                    "last-round",
                    "last-version",
                    "next-version",
                    "next-version-round",
                    "next-version-supported",
                    "stopped-at-unsupported-round",
                    "time-since-last-round"
                  ],
                  "type": "object",
                  "properties": {
                    "catchup-time": {
                      "type": "integer",
                      "description": "CatchupTime in nanoseconds",
                      "x-go-type": "int64",
                      "x-algokit-bigint": true
                    },
                    "last-round": {
                      "type": "integer",
                      "description": "LastRound indicates the last round seen",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "last-version": {
                      "type": "string",
                      "description": "LastVersion indicates the last consensus version supported"
                    },
                    "next-version": {
                      "type": "string",
                      "description": "NextVersion of consensus protocol to use"
                    },
                    "next-version-round": {
                      "type": "integer",
                      "description": "NextVersionRound is the round at which the next consensus version will apply",
                      "x-go-type": "basics.Round"
                    },
                    "next-version-supported": {
                      "type": "boolean",
                      "description": "NextVersionSupported indicates whether the next consensus version is supported by this node"
                    },
                    "stopped-at-unsupported-round": {
                      "type": "boolean",
                      "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress"
                    },
                    "time-since-last-round": {
                      "type": "integer",
                      "description": "TimeSinceLastRound in nanoseconds",
                      "x-go-type": "int64",
                      "x-algokit-bigint": true
                    },
                    "last-catchpoint": {
                      "type": "string",
                      "description": "The last catchpoint seen by the node"
                    },
                    "catchpoint": {
                      "type": "string",
                      "description": "The current catchpoint that is being caught up to"
                    },
                    "catchpoint-total-accounts": {
                      "type": "integer",
                      "description": "The total number of accounts included in the current catchpoint",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-processed-accounts": {
                      "type": "integer",
                      "description": "The number of accounts from the current catchpoint that have been processed so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-verified-accounts": {
                      "type": "integer",
                      "description": "The number of accounts from the current catchpoint that have been verified so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-total-kvs": {
                      "type": "integer",
                      "description": "The total number of key-values (KVs) included in the current catchpoint",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-processed-kvs": {
                      "type": "integer",
                      "description": "The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-verified-kvs": {
                      "type": "integer",
                      "description": "The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-total-blocks": {
                      "type": "integer",
                      "description": "The total number of blocks that are required to complete the current catchpoint catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-acquired-blocks": {
                      "type": "integer",
                      "description": "The number of blocks that have already been obtained by the node as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "upgrade-delay": {
                      "type": "integer",
                      "description": "Upgrade delay",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-node-vote": {
                      "type": "boolean",
                      "description": "This node's upgrade vote"
                    },
                    "upgrade-votes-required": {
                      "type": "integer",
                      "description": "Yes votes required for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-votes": {
                      "type": "integer",
                      "description": "Total votes cast for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-yes-votes": {
                      "type": "integer",
                      "description": "Yes votes cast for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-no-votes": {
                      "type": "integer",
                      "description": "No votes cast for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-next-protocol-vote-before": {
                      "type": "integer",
                      "description": "Next protocol round",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-vote-rounds": {
                      "type": "integer",
                      "description": "Total voting rounds for current upgrade",
                      "x-go-type": "basics.Round"
                    }
                  },
                  "description": "NodeStatus contains the information about a node status"
                }
              }
            },
            "description": "Returns the current node status including sync status, version, and latest round"
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/status/wait-for-block-after/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Gets the node status after waiting for a round after the given round.",
        "description": "Waits for a block to appear after round {round} and returns the node's status at the time. There is a 1 minute timeout, when reached the current status is returned regardless of whether or not it is the round after the given round.",
        "operationId": "WaitForBlock",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "catchup-time",
                    "last-round",
                    "last-version",
                    "next-version",
                    "next-version-round",
                    "next-version-supported",
                    "stopped-at-unsupported-round",
                    "time-since-last-round"
                  ],
                  "type": "object",
                  "properties": {
                    "catchup-time": {
                      "type": "integer",
                      "description": "CatchupTime in nanoseconds",
                      "x-go-type": "int64",
                      "x-algokit-bigint": true
                    },
                    "last-round": {
                      "type": "integer",
                      "description": "LastRound indicates the last round seen",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "last-version": {
                      "type": "string",
                      "description": "LastVersion indicates the last consensus version supported"
                    },
                    "next-version": {
                      "type": "string",
                      "description": "NextVersion of consensus protocol to use"
                    },
                    "next-version-round": {
                      "type": "integer",
                      "description": "NextVersionRound is the round at which the next consensus version will apply",
                      "x-go-type": "basics.Round"
                    },
                    "next-version-supported": {
                      "type": "boolean",
                      "description": "NextVersionSupported indicates whether the next consensus version is supported by this node"
                    },
                    "stopped-at-unsupported-round": {
                      "type": "boolean",
                      "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress"
                    },
                    "time-since-last-round": {
                      "type": "integer",
                      "description": "TimeSinceLastRound in nanoseconds",
                      "x-go-type": "int64",
                      "x-algokit-bigint": true
                    },
                    "last-catchpoint": {
                      "type": "string",
                      "description": "The last catchpoint seen by the node"
                    },
                    "catchpoint": {
                      "type": "string",
                      "description": "The current catchpoint that is being caught up to"
                    },
                    "catchpoint-total-accounts": {
                      "type": "integer",
                      "description": "The total number of accounts included in the current catchpoint",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-processed-accounts": {
                      "type": "integer",
                      "description": "The number of accounts from the current catchpoint that have been processed so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-verified-accounts": {
                      "type": "integer",
                      "description": "The number of accounts from the current catchpoint that have been verified so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-total-kvs": {
                      "type": "integer",
                      "description": "The total number of key-values (KVs) included in the current catchpoint",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-processed-kvs": {
                      "type": "integer",
                      "description": "The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-verified-kvs": {
                      "type": "integer",
                      "description": "The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-total-blocks": {
                      "type": "integer",
                      "description": "The total number of blocks that are required to complete the current catchpoint catchup",
                      "x-algokit-bigint": true
                    },
                    "catchpoint-acquired-blocks": {
                      "type": "integer",
                      "description": "The number of blocks that have already been obtained by the node as part of the catchup",
                      "x-algokit-bigint": true
                    },
                    "upgrade-delay": {
                      "type": "integer",
                      "description": "Upgrade delay",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-node-vote": {
                      "type": "boolean",
                      "description": "This node's upgrade vote"
                    },
                    "upgrade-votes-required": {
                      "type": "integer",
                      "description": "Yes votes required for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-votes": {
                      "type": "integer",
                      "description": "Total votes cast for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-yes-votes": {
                      "type": "integer",
                      "description": "Yes votes cast for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-no-votes": {
                      "type": "integer",
                      "description": "No votes cast for consensus upgrade",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-next-protocol-vote-before": {
                      "type": "integer",
                      "description": "Next protocol round",
                      "x-go-type": "basics.Round"
                    },
                    "upgrade-vote-rounds": {
                      "type": "integer",
                      "description": "Total voting rounds for current upgrade",
                      "x-go-type": "basics.Round"
                    }
                  },
                  "description": "NodeStatus contains the information about a node status"
                }
              }
            },
            "description": "Returns node status after the specified round is reached"
          },
          "400": {
            "description": "Bad Request -- number must be non-negative integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/transactions": {
      "post": {
        "tags": [
          "public",
          "participating"
        ],
        "summary": "Broadcasts a raw transaction or transaction group to the network.",
        "operationId": "RawTransaction",
        "requestBody": {
          "description": "The byte encoded signed transaction to broadcast to network",
          "content": {
            "application/x-binary": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction ID of the submission.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "txId"
                  ],
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "string",
                      "description": "encoding of the transaction hash."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Malformed Algorand transaction ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "rawtxn"
      }
    },
    "/v2/transactions/async": {
      "post": {
        "tags": [
          "public",
          "experimental"
        ],
        "summary": "Fast track for broadcasting a raw transaction or transaction group to the network through the tx handler without performing most of the checks and reporting detailed errors. Should be only used for development and performance testing.",
        "operationId": "RawTransactionAsync",
        "requestBody": {
          "description": "The byte encoded signed transaction to broadcast to network",
          "content": {
            "application/x-binary": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Transaction successfully submitted for asynchronous processing"
          },
          "400": {
            "description": "Bad Request - Malformed Algorand transaction ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer or Experimental API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "rawtxn"
      }
    },
    "/v2/transactions/simulate": {
      "post": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.",
        "operationId": "SimulateTransaction",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "msgpack"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "The transactions to simulate, along with any other inputs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateRequest"
              }
            },
            "application/msgpack": {
              "schema": {
                "$ref": "#/components/schemas/SimulateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result of a transaction group simulation.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "last-round",
                    "txn-groups",
                    "version"
                  ],
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "description": "The version of this response object.",
                      "x-algokit-bigint": true
                    },
                    "last-round": {
                      "type": "integer",
                      "description": "The round immediately preceding this simulation. State changes through this round were used to run this simulation.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "txn-groups": {
                      "type": "array",
                      "description": "A result object for each transaction group that was simulated.",
                      "items": {
                        "$ref": "#/components/schemas/SimulateTransactionGroupResult"
                      }
                    },
                    "eval-overrides": {
                      "$ref": "#/components/schemas/SimulationEvalOverrides"
                    },
                    "exec-trace-config": {
                      "$ref": "#/components/schemas/SimulateTraceConfig"
                    },
                    "initial-states": {
                      "$ref": "#/components/schemas/SimulateInitialStates"
                    }
                  }
                }
              },
              "application/msgpack": {
                "schema": {
                  "required": [
                    "last-round",
                    "txn-groups",
                    "version"
                  ],
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "description": "The version of this response object.",
                      "x-algokit-bigint": true
                    },
                    "last-round": {
                      "type": "integer",
                      "description": "The round immediately preceding this simulation. State changes through this round were used to run this simulation.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "txn-groups": {
                      "type": "array",
                      "description": "A result object for each transaction group that was simulated.",
                      "items": {
                        "$ref": "#/components/schemas/SimulateTransactionGroupResult"
                      }
                    },
                    "eval-overrides": {
                      "$ref": "#/components/schemas/SimulationEvalOverrides"
                    },
                    "exec-trace-config": {
                      "$ref": "#/components/schemas/SimulateTraceConfig"
                    },
                    "initial-states": {
                      "$ref": "#/components/schemas/SimulateInitialStates"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/v2/transactions/params": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get parameters for constructing a new transaction",
        "operationId": "TransactionParams",
        "responses": {
          "200": {
            "description": "TransactionParams contains the parameters that help a client construct a new transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "consensus-version",
                    "fee",
                    "genesis-hash",
                    "genesis-id",
                    "last-round",
                    "min-fee"
                  ],
                  "type": "object",
                  "properties": {
                    "consensus-version": {
                      "type": "string",
                      "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound."
                    },
                    "fee": {
                      "type": "integer",
                      "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
                      "x-algokit-bigint": true
                    },
                    "genesis-hash": {
                      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                      "type": "string",
                      "description": "GenesisHash is the hash of the genesis block.",
                      "format": "byte"
                    },
                    "genesis-id": {
                      "type": "string",
                      "description": "GenesisID is an ID listed in the genesis block."
                    },
                    "last-round": {
                      "type": "integer",
                      "description": "LastRound indicates the last round seen",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    },
                    "min-fee": {
                      "type": "integer",
                      "description": "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
                      "x-algokit-bigint": true
                    }
                  },
                  "description": "TransactionParams contains the parameters that help a client construct\na new transaction."
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/transactions/pending": {
      "get": {
        "tags": [
          "public",
          "participating"
        ],
        "summary": "Get a list of unconfirmed transactions currently in the transaction pool.",
        "description": "Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.\n",
        "operationId": "GetPendingTransactions",
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
            "schema": {
              "type": "integer",
              "x-algokit-bigint": true
            },
            "x-algokit-bigint": true
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
            "content": {
              "application/msgpack": {
                "schema": {
                  "required": [
                    "top-transactions",
                    "total-transactions"
                  ],
                  "type": "object",
                  "properties": {
                    "top-transactions": {
                      "type": "array",
                      "description": "An array of signed transaction objects.",
                      "items": {
                        "type": "object",
                        "properties": {},
                        "x-algokit-signed-txn": true
                      }
                    },
                    "total-transactions": {
                      "type": "integer",
                      "description": "Total number of transactions in the pool."
                    }
                  },
                  "description": "PendingTransactions is an array of signed transactions exactly as they were submitted."
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/transactions/pending/{txid}": {
      "get": {
        "tags": [
          "public",
          "participating"
        ],
        "summary": "Get a specific pending transaction.",
        "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n",
        "operationId": "PendingTransactionInformation",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "A transaction ID",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]+",
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:\n- transaction committed (committed round > 0)\n- transaction still in the pool (committed round = 0, pool error = \"\")\n- transaction removed from pool due to error (committed round = 0, pool error != \"\")\n\nOr the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/PendingTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Transaction Not Found",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/deltas/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get a LedgerStateDelta object for a given round",
        "description": "Get ledger deltas for a round.",
        "operationId": "GetLedgerStateDelta",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contains ledger deltas",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerStateDelta"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find a delta for round",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "timed out on request",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/deltas/{round}/txn/group": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get LedgerStateDelta objects for all transaction groups in a given round",
        "description": "Get ledger deltas for transaction groups in a given round.",
        "operationId": "GetTransactionGroupLedgerStateDeltasForRound",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing all ledger state deltas for transaction groups, with their associated Ids, in a single round.",
            "content": {
              "application/msgpack": {
                "schema": {
                  "required": [
                    "Deltas"
                  ],
                  "type": "object",
                  "properties": {
                    "Deltas": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LedgerStateDeltaForTransactionGroup"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find deltas for round",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "timed out on request",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/deltas/txn/group/{id}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get a LedgerStateDelta object for a given transaction group",
        "description": "Get a ledger delta for a given transaction group.",
        "operationId": "GetLedgerStateDeltaForTransactionGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A transaction ID, or transaction group ID",
            "required": true,
            "schema": {
              "pattern": "[A-Z0-9]+",
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
            "schema": {
              "type": "string",
              "enum": [
                "msgpack"
              ],
              "default": "msgpack"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response containing a ledger state delta for a single transaction group.",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerStateDelta"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find a delta for transaction ID or group ID",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "timed out on request",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/msgpack": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/stateproofs/{round}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get a state proof that covers a given round",
        "operationId": "GetStateProof",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "description": "StateProofResponse wraps the StateProof type in a response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateProof"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find a state proof that covers a given round",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "timed out on request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/blocks/{round}/lightheader/proof": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Gets a proof for a given light block header inside a state proof commitment",
        "operationId": "GetLightBlockHeaderProof",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "description": "Proof of a light block header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightBlockHeaderProof"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not create proof since some data is missing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "timed out on request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/applications/{application-id}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get application information.",
        "description": "Given a application ID, it returns application information including creator, approval and clear programs, global and local schemas, and global state.",
        "operationId": "GetApplicationByID",
        "parameters": [
          {
            "name": "application-id",
            "in": "path",
            "description": "An application identifier.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.AppIndex"
            },
            "x-go-type": "basics.AppIndex"
          }
        ],
        "responses": {
          "200": {
            "description": "Application information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/applications/{application-id}/boxes": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get all box names for a given application.",
        "description": "Given an application ID, return all Box names. No particular ordering is guaranteed. Request fails when client or server-side configured limits prevent returning all Box names.",
        "operationId": "GetApplicationBoxes",
        "parameters": [
          {
            "name": "application-id",
            "in": "path",
            "description": "An application identifier.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.AppIndex"
            },
            "x-go-type": "basics.AppIndex"
          },
          {
            "name": "max",
            "in": "query",
            "description": "Max number of box names to return. If max is not set, or max == 0, returns all box-names.",
            "schema": {
              "type": "integer",
              "x-algokit-bigint": true
            },
            "x-algokit-bigint": true
          }
        ],
        "responses": {
          "200": {
            "description": "Box names of an application",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "boxes"
                  ],
                  "type": "object",
                  "properties": {
                    "boxes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BoxDescriptor"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/applications/{application-id}/box": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get box information for a given application.",
        "description": "Given an application ID and box name, it returns the round, box name, and value (each base64 encoded). Box names must be in the goal app call arg encoding form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.",
        "operationId": "GetApplicationBoxByName",
        "parameters": [
          {
            "name": "application-id",
            "in": "path",
            "description": "An application identifier.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.AppIndex"
            },
            "x-go-type": "basics.AppIndex"
          },
          {
            "name": "name",
            "in": "query",
            "description": "A box name, in the goal app call arg form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Box information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Box"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Box Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/assets/{asset-id}": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Get asset information.",
        "description": "Given a asset ID, it returns asset information including creator, name, total supply and special addresses.",
        "operationId": "GetAssetByID",
        "parameters": [
          {
            "name": "asset-id",
            "in": "path",
            "description": "An asset identifier.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.AssetIndex"
            },
            "x-go-type": "basics.AssetIndex"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Application Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/ledger/sync": {
      "get": {
        "tags": [
          "public",
          "data"
        ],
        "summary": "Returns the minimum sync round the ledger is keeping in cache.",
        "description": "Gets the minimum sync round for the ledger.",
        "operationId": "GetSyncRound",
        "responses": {
          "200": {
            "description": "Response containing the ledger's minimum sync round",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "round"
                  ],
                  "type": "object",
                  "properties": {
                    "round": {
                      "type": "integer",
                      "description": "The minimum sync round for the ledger.",
                      "x-go-type": "basics.Round",
                      "x-algokit-bigint": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Sync round not set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "public",
          "data"
        ],
        "summary": "Removes minimum sync round restriction from the ledger.",
        "description": "Unset the ledger sync round.",
        "operationId": "UnsetSyncRound",
        "responses": {
          "200": {
            "content": {},
            "description": "Ledger sync operation stopped successfully"
          },
          "400": {
            "description": "Sync round not set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/ledger/sync/{round}": {
      "post": {
        "tags": [
          "public",
          "data"
        ],
        "summary": "Given a round, tells the ledger to keep that round in its cache.",
        "description": "Sets the minimum sync round on the ledger.",
        "operationId": "SetSyncRound",
        "parameters": [
          {
            "name": "round",
            "in": "path",
            "description": "A round number.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "content": {},
            "description": "Ledger sync to specified round initiated successfully"
          },
          "400": {
            "description": "Can not set sync round to an earlier round than the current round.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Temporarily Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/teal/compile": {
      "post": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Compile TEAL source code to binary, produce its hash",
        "description": "Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style). This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "operationId": "TealCompile",
        "parameters": [
          {
            "name": "sourcemap",
            "in": "query",
            "description": "When set to `true`, returns the source map of the program as a JSON. Defaults to `false`.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "TEAL source code to be compiled",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Teal compile Result",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "hash",
                    "result"
                  ],
                  "type": "object",
                  "properties": {
                    "hash": {
                      "type": "string",
                      "description": "base32 SHA512_256 of program bytes (Address style)"
                    },
                    "result": {
                      "type": "string",
                      "description": "base64 encoded program bytes"
                    },
                    "sourcemap": {
                      "type": "object",
                      "properties": {},
                      "description": "JSON of the source map"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Teal Compile Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "source"
      }
    },
    "/v2/teal/disassemble": {
      "post": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Disassemble program bytes into the TEAL source code.",
        "description": "Given the program bytes, return the TEAL source code in plain text. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "operationId": "TealDisassemble",
        "requestBody": {
          "description": "TEAL program binary to be disassembled",
          "content": {
            "application/x-binary": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Teal disassembly Result",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "result"
                  ],
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "string",
                      "description": "disassembled Teal code"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Teal Compile Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "source"
      }
    },
    "/v2/catchup/{catchpoint}": {
      "post": {
        "tags": [
          "private",
          "nonparticipating"
        ],
        "summary": "Starts a catchpoint catchup.",
        "description": "Given a catchpoint, it starts catching up to this catchpoint",
        "operationId": "StartCatchup",
        "parameters": [
          {
            "name": "catchpoint",
            "in": "path",
            "description": "A catch point",
            "required": true,
            "schema": {
              "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
              "type": "string",
              "format": "catchpoint",
              "x-algorand-format": "Catchpoint String"
            },
            "x-algorand-format": "Catchpoint String"
          },
          {
            "name": "min",
            "in": "query",
            "description": "Specify the minimum number of blocks which the ledger must be advanced by in order to start the catchup. This is useful for simplifying tools which support fast catchup, they can run the catchup unconditionally and the node will skip the catchup if it is not needed.",
            "schema": {
              "type": "integer",
              "x-go-type": "basics.Round"
            },
            "x-go-type": "basics.Round"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "catchup-message"
                  ],
                  "type": "object",
                  "properties": {
                    "catchup-message": {
                      "type": "string",
                      "description": "Catchup start response string"
                    }
                  },
                  "description": "An catchpoint start response."
                }
              }
            },
            "description": "Catchpoint operation started successfully"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "catchup-message"
                  ],
                  "type": "object",
                  "properties": {
                    "catchup-message": {
                      "type": "string",
                      "description": "Catchup start response string"
                    }
                  },
                  "description": "An catchpoint start response."
                }
              }
            },
            "description": "Catchpoint operation created and started successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "private",
          "nonparticipating"
        ],
        "summary": "Aborts a catchpoint catchup.",
        "description": "Given a catchpoint, it aborts catching up to this catchpoint",
        "operationId": "AbortCatchup",
        "parameters": [
          {
            "name": "catchpoint",
            "in": "path",
            "description": "A catch point",
            "required": true,
            "schema": {
              "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
              "type": "string",
              "format": "catchpoint",
              "x-algorand-format": "Catchpoint String"
            },
            "x-algorand-format": "Catchpoint String"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "catchup-message"
                  ],
                  "type": "object",
                  "properties": {
                    "catchup-message": {
                      "type": "string",
                      "description": "Catchup abort response string"
                    }
                  },
                  "description": "An catchpoint abort response."
                }
              }
            },
            "description": "Catchpoint operation aborted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/teal/dryrun": {
      "post": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Provide debugging information for a transaction (or group).",
        "description": "Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.",
        "operationId": "TealDryrun",
        "requestBody": {
          "description": "Transaction (or group) and any accompanying state-simulation data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DryrunRequest"
              }
            },
            "application/msgpack": {
              "schema": {
                "$ref": "#/components/schemas/DryrunRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "DryrunResponse contains per-txn debug information from a dryrun.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "error",
                    "protocol-version",
                    "txns"
                  ],
                  "type": "object",
                  "properties": {
                    "txns": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DryrunTxnResult"
                      }
                    },
                    "error": {
                      "type": "string"
                    },
                    "protocol-version": {
                      "type": "string",
                      "description": "Protocol version is the protocol version Dryrun was operated under."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Developer API not enabled",
            "content": {}
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "request"
      }
    },
    "/v2/experimental": {
      "get": {
        "tags": [
          "public",
          "experimental"
        ],
        "summary": "Returns OK if experimental API is enabled.",
        "operationId": "ExperimentalCheck",
        "responses": {
          "200": {
            "description": "Experimental API enabled",
            "content": {}
          },
          "404": {
            "description": "Experimental API not enabled",
            "content": {}
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/devmode/blocks/offset": {
      "get": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Returns the timestamp offset. Timestamp offsets can only be set in dev mode.",
        "description": "Gets the current timestamp offset.",
        "operationId": "GetBlockTimeStampOffset",
        "responses": {
          "200": {
            "description": "Response containing the timestamp offset in seconds",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "offset"
                  ],
                  "type": "object",
                  "properties": {
                    "offset": {
                      "type": "integer",
                      "description": "Timestamp offset in seconds.",
                      "x-algokit-bigint": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TimeStamp offset not set.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    },
    "/v2/devmode/blocks/offset/{offset}": {
      "post": {
        "tags": [
          "public",
          "nonparticipating"
        ],
        "summary": "Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.",
        "description": "Sets the timestamp offset (seconds) for blocks in dev mode. Providing an offset of 0 will unset this value and try to use the real clock for the timestamp.",
        "operationId": "SetBlockTimeStampOffset",
        "parameters": [
          {
            "name": "offset",
            "in": "path",
            "description": "The timestamp offset for blocks in dev mode.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "x-algokit-bigint": true
            },
            "x-algokit-bigint": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Cannot set timestamp offset to a negative integer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unknown Error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GenesisAllocation": {
        "title": "Allocations for Genesis File",
        "required": [
          "addr",
          "comment",
          "state"
        ],
        "type": "object",
        "properties": {
          "addr": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "state": {
            "required": [
              "algo",
              "onl"
            ],
            "type": "object",
            "properties": {
              "algo": {
                "type": "integer",
                "format": "uint64",
                "x-algokit-bigint": true
              },
              "onl": {
                "type": "integer"
              },
              "sel": {
                "type": "string"
              },
              "stprf": {
                "type": "string"
              },
              "vote": {
                "type": "string"
              },
              "voteKD": {
                "type": "integer",
                "format": "uint64",
                "x-algokit-bigint": true
              },
              "voteFst": {
                "type": "integer",
                "format": "uint64",
                "x-algokit-bigint": true
              },
              "voteLst": {
                "type": "integer",
                "format": "uint64",
                "x-algokit-bigint": true
              }
            }
          }
        }
      },
      "Genesis": {
        "title": "Genesis File in JSON",
        "required": [
          "alloc",
          "fees",
          "id",
          "network",
          "proto",
          "rwd",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "alloc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenesisAllocation"
            }
          },
          "comment": {
            "type": "string"
          },
          "devmode": {
            "type": "boolean"
          },
          "fees": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "proto": {
            "type": "string"
          },
          "rwd": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LedgerStateDelta": {
        "type": "object",
        "description": "Ledger StateDelta object",
        "x-algorand-format": "StateDelta"
      },
      "LedgerStateDeltaForTransactionGroup": {
        "required": [
          "Delta",
          "Ids"
        ],
        "type": "object",
        "properties": {
          "Delta": {
            "$ref": "#/components/schemas/LedgerStateDelta"
          },
          "Ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Contains a ledger delta for a single transaction group"
      },
      "Account": {
        "required": [
          "address",
          "amount",
          "amount-without-pending-rewards",
          "min-balance",
          "pending-rewards",
          "rewards",
          "round",
          "status",
          "total-apps-opted-in",
          "total-assets-opted-in",
          "total-created-apps",
          "total-created-assets"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "the account public key"
          },
          "amount": {
            "type": "integer",
            "description": "\\[algo\\] total number of MicroAlgos in the account",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "min-balance": {
            "type": "integer",
            "description": "MicroAlgo balance required by the account.\n\nThe requirement grows based on asset and application usage.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "amount-without-pending-rewards": {
            "type": "integer",
            "description": "specifies the amount of MicroAlgos in the account, without the pending rewards.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "apps-local-state": {
            "type": "array",
            "description": "\\[appl\\] applications local data stored in this account.\n\nNote the raw object uses `map[int] -> AppLocalState` for this type.",
            "items": {
              "$ref": "#/components/schemas/ApplicationLocalState"
            }
          },
          "total-apps-opted-in": {
            "type": "integer",
            "description": "The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "apps-total-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "apps-total-extra-pages": {
            "type": "integer",
            "description": "\\[teap\\] the sum of all extra application program pages for this account.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "assets": {
            "type": "array",
            "description": "\\[asset\\] assets held by this account.\n\nNote the raw object uses `map[int] -> AssetHolding` for this type.",
            "items": {
              "$ref": "#/components/schemas/AssetHolding"
            }
          },
          "total-assets-opted-in": {
            "type": "integer",
            "description": "The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "created-apps": {
            "type": "array",
            "description": "\\[appp\\] parameters of applications created by this account including app global data.\n\nNote: the raw account uses `map[int] -> AppParams` for this type.",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "total-created-apps": {
            "type": "integer",
            "description": "The count of all apps (AppParams objects) created by this account.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "created-assets": {
            "type": "array",
            "description": "\\[apar\\] parameters of assets created by this account.\n\nNote: the raw account uses `map[int] -> Asset` for this type.",
            "items": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          "total-created-assets": {
            "type": "integer",
            "description": "The count of all assets (AssetParams objects) created by this account.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "total-boxes": {
            "type": "integer",
            "description": "\\[tbx\\] The number of existing boxes created by this account's app.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "total-box-bytes": {
            "type": "integer",
            "description": "\\[tbxb\\] The total number of bytes used by this account's app's box keys and values.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "participation": {
            "$ref": "#/components/schemas/AccountParticipation"
          },
          "incentive-eligible": {
            "type": "boolean",
            "description": "Whether or not the account can receive block incentives if its balance is in range at proposal time."
          },
          "pending-rewards": {
            "type": "integer",
            "description": "amount of MicroAlgos of pending rewards in this account.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "reward-base": {
            "type": "integer",
            "description": "\\[ebase\\] used as part of the rewards computation. Only applicable to accounts which are participating.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "rewards": {
            "type": "integer",
            "description": "\\[ern\\] total rewards of MicroAlgos the account has received, including pending rewards.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "round": {
            "type": "integer",
            "description": "The round for which this information is relevant.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "status": {
            "type": "string",
            "description": "\\[onl\\] delegation status of the account's MicroAlgos\n* Offline - indicates that the associated account is delegated.\n*  Online  - indicates that the associated account used as part of the delegation pool.\n*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate."
          },
          "sig-type": {
            "type": "string",
            "description": "Indicates what type of signature is used by this account, must be one of:\n* sig\n* msig\n* lsig",
            "enum": [
              "sig",
              "msig",
              "lsig"
            ]
          },
          "auth-addr": {
            "type": "string",
            "description": "\\[spend\\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.",
            "x-algorand-format": "Address"
          },
          "last-proposed": {
            "type": "integer",
            "description": "The round in which this account last proposed the block.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "last-heartbeat": {
            "type": "integer",
            "description": "The round in which this account last went online, or explicitly renewed their online status.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          }
        },
        "description": "Account information at a given round.\n\nDefinition:\ndata/basics/userBalance.go : AccountData\n"
      },
      "AccountAssetHolding": {
        "required": [
          "asset-holding"
        ],
        "type": "object",
        "properties": {
          "asset-holding": {
            "$ref": "#/components/schemas/AssetHolding"
          },
          "asset-params": {
            "$ref": "#/components/schemas/AssetParams"
          }
        },
        "description": "AccountAssetHolding describes the account's asset holding and asset parameters (if either exist) for a specific asset ID."
      },
      "AccountParticipation": {
        "required": [
          "selection-participation-key",
          "vote-first-valid",
          "vote-key-dilution",
          "vote-last-valid",
          "vote-participation-key"
        ],
        "type": "object",
        "properties": {
          "selection-participation-key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[sel\\] Selection public key (if any) currently registered for this round.",
            "format": "byte"
          },
          "vote-first-valid": {
            "type": "integer",
            "description": "\\[voteFst\\] First round for which this participation is valid.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "vote-key-dilution": {
            "type": "integer",
            "description": "\\[voteKD\\] Number of subkeys in each batch of participation keys.",
            "x-algokit-bigint": true
          },
          "vote-last-valid": {
            "type": "integer",
            "description": "\\[voteLst\\] Last round for which this participation is valid.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "vote-participation-key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[vote\\] root participation public key (if any) currently registered for this round.",
            "format": "byte"
          },
          "state-proof-key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[stprf\\] Root of the state proof key (if any)",
            "format": "byte"
          }
        },
        "description": "AccountParticipation describes the parameters used by this account in consensus protocol."
      },
      "Asset": {
        "required": [
          "index",
          "params"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "unique asset identifier",
            "x-go-type": "basics.AssetIndex",
            "x-algokit-bigint": true
          },
          "params": {
            "$ref": "#/components/schemas/AssetParams"
          }
        },
        "description": "Specifies both the unique identifier and the parameters for an asset"
      },
      "AssetHolding": {
        "required": [
          "amount",
          "asset-id",
          "is-frozen"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "\\[a\\] number of units held.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "asset-id": {
            "type": "integer",
            "description": "Asset ID of the holding.",
            "x-go-name": "AssetID",
            "x-go-type": "basics.AssetIndex",
            "x-algokit-bigint": true
          },
          "is-frozen": {
            "type": "boolean",
            "description": "\\[f\\] whether or not the holding is frozen."
          }
        },
        "description": "Describes an asset held by an account.\n\nDefinition:\ndata/basics/userBalance.go : AssetHolding"
      },
      "AssetParams": {
        "required": [
          "creator",
          "decimals",
          "total"
        ],
        "type": "object",
        "properties": {
          "clawback": {
            "type": "string",
            "description": "\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted."
          },
          "creator": {
            "type": "string",
            "description": "The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case."
          },
          "decimals": {
            "maximum": 19,
            "minimum": 0,
            "type": "integer",
            "description": "\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "default-frozen": {
            "type": "boolean",
            "description": "\\[df\\] Whether holdings of this asset are frozen by default."
          },
          "freeze": {
            "type": "string",
            "description": "\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted."
          },
          "manager": {
            "type": "string",
            "description": "\\[m\\] Address of account used to manage the keys of this asset and to destroy it."
          },
          "metadata-hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.",
            "format": "byte"
          },
          "name": {
            "type": "string",
            "description": "\\[an\\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters."
          },
          "name-b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded name of this asset, as supplied by the creator.",
            "format": "byte"
          },
          "reserve": {
            "type": "string",
            "description": "\\[r\\] Address of account holding reserve (non-minted) units of this asset."
          },
          "total": {
            "type": "integer",
            "description": "\\[t\\] The total number of units of this asset.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "unit-name": {
            "type": "string",
            "description": "\\[un\\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters."
          },
          "unit-name-b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded name of a unit of this asset, as supplied by the creator.",
            "format": "byte"
          },
          "url": {
            "type": "string",
            "description": "\\[au\\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters."
          },
          "url-b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded URL where more information about the asset can be retrieved.",
            "format": "byte"
          }
        },
        "description": "AssetParams specifies the parameters for an asset.\n\n\\[apar\\] when part of an AssetConfig transaction.\n\nDefinition:\ndata/transactions/asset.go : AssetParams"
      },
      "AssetHoldingReference": {
        "required": [
          "account",
          "asset"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "Address of the account holding the asset.",
            "x-algorand-format": "Address"
          },
          "asset": {
            "type": "integer",
            "description": "Asset ID of the holding.",
            "x-go-type": "basics.AssetIndex",
            "x-algokit-bigint": true
          }
        },
        "description": "References an asset held by an account."
      },
      "ApplicationLocalReference": {
        "required": [
          "account",
          "app"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "Address of the account with the local state.",
            "x-algorand-format": "Address"
          },
          "app": {
            "type": "integer",
            "description": "Application ID of the local state application.",
            "x-go-type": "basics.AppIndex",
            "x-algokit-bigint": true
          }
        },
        "description": "References an account's local state for an application."
      },
      "ApplicationStateSchema": {
        "required": [
          "num-byte-slice",
          "num-uint"
        ],
        "type": "object",
        "properties": {
          "num-uint": {
            "type": "integer",
            "description": "\\[nui\\] num of uints.",
            "minimum": 0,
            "maximum": 64
          },
          "num-byte-slice": {
            "type": "integer",
            "description": "\\[nbs\\] num of byte slices.",
            "minimum": 0,
            "maximum": 64
          }
        },
        "description": "Specifies maximums on the number of each type that may be stored."
      },
      "ApplicationLocalState": {
        "required": [
          "id",
          "schema"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The application which this local state is for.",
            "x-go-type": "basics.AppIndex",
            "x-algokit-bigint": true
          },
          "schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "key-value": {
            "$ref": "#/components/schemas/TealKeyValueStore"
          }
        },
        "description": "Stores local state associated with an application."
      },
      "ParticipationKey": {
        "required": [
          "address",
          "id",
          "key"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The key's ParticipationID."
          },
          "address": {
            "type": "string",
            "description": "Address the key was generated for.",
            "x-algorand-format": "Address"
          },
          "effective-first-valid": {
            "type": "integer",
            "description": "When registered, this is the first round it may be used.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "effective-last-valid": {
            "type": "integer",
            "description": "When registered, this is the last round it may be used.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "last-vote": {
            "type": "integer",
            "description": "Round when this key was last used to vote.",
            "x-go-type": "basics.Round"
          },
          "last-block-proposal": {
            "type": "integer",
            "description": "Round when this key was last used to propose a block.",
            "x-go-type": "basics.Round"
          },
          "last-state-proof": {
            "type": "integer",
            "description": "Round when this key was last used to generate a state proof.",
            "x-go-type": "basics.Round"
          },
          "key": {
            "$ref": "#/components/schemas/AccountParticipation"
          }
        },
        "description": "Represents a participation key used by the node."
      },
      "TealKeyValueStore": {
        "type": "array",
        "description": "Represents a key-value store for use in an application.",
        "items": {
          "$ref": "#/components/schemas/TealKeyValue"
        }
      },
      "TealKeyValue": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/TealValue"
          }
        },
        "description": "Represents a key-value pair in an application store."
      },
      "TealValue": {
        "required": [
          "bytes",
          "type",
          "uint"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "\\[tt\\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**",
            "x-algokit-bigint": true
          },
          "bytes": {
            "type": "string",
            "description": "\\[tb\\] bytes value.",
            "x-algokit-bytes-base64": true
          },
          "uint": {
            "type": "integer",
            "description": "\\[ui\\] uint value.",
            "format": "uint64",
            "x-algokit-bigint": true
          }
        },
        "description": "Represents a TEAL value."
      },
      "AvmValue": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "value type. Value `1` refers to **bytes**, value `2` refers to **uint64**",
            "x-algokit-bigint": true
          },
          "bytes": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "bytes value."
          },
          "uint": {
            "type": "integer",
            "description": "uint value.",
            "format": "uint64",
            "x-algokit-bigint": true
          }
        },
        "description": "Represents an AVM value."
      },
      "AvmKeyValue": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "value": {
            "$ref": "#/components/schemas/AvmValue"
          }
        },
        "description": "Represents an AVM key-value pair in an application store."
      },
      "StateDelta": {
        "type": "array",
        "description": "Application state delta.",
        "items": {
          "$ref": "#/components/schemas/EvalDeltaKeyValue"
        }
      },
      "AccountStateDelta": {
        "required": [
          "address",
          "delta"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "delta": {
            "$ref": "#/components/schemas/StateDelta"
          }
        },
        "description": "Application state delta."
      },
      "EvalDeltaKeyValue": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/EvalDelta"
          }
        },
        "description": "Key-value pairs for StateDelta."
      },
      "EvalDelta": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "integer",
            "description": "\\[at\\] delta action."
          },
          "bytes": {
            "type": "string",
            "description": "\\[bs\\] bytes value."
          },
          "uint": {
            "type": "integer",
            "description": "\\[ui\\] uint value.",
            "format": "uint64",
            "x-algokit-bigint": true
          }
        },
        "description": "Represents a TEAL value delta."
      },
      "Application": {
        "required": [
          "id",
          "params"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "\\[appidx\\] application index.",
            "x-go-type": "basics.AppIndex",
            "x-algokit-bigint": true
          },
          "params": {
            "$ref": "#/components/schemas/ApplicationParams"
          }
        },
        "description": "Application index and its parameters"
      },
      "ApplicationParams": {
        "required": [
          "approval-program",
          "clear-state-program",
          "creator"
        ],
        "type": "object",
        "properties": {
          "creator": {
            "type": "string",
            "description": "The address that created this application. This is the address where the parameters and global state for this application can be found.",
            "x-algorand-format": "Address"
          },
          "approval-program": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[approv\\] approval program.",
            "format": "byte",
            "x-algorand-format": "TEALProgram"
          },
          "clear-state-program": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "\\[clearp\\] approval program.",
            "format": "byte",
            "x-algorand-format": "TEALProgram"
          },
          "extra-program-pages": {
            "type": "integer",
            "description": "\\[epp\\] the amount of extra program pages available to this app.",
            "minimum": 0,
            "maximum": 3
          },
          "local-state-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "global-state-schema": {
            "$ref": "#/components/schemas/ApplicationStateSchema"
          },
          "global-state": {
            "$ref": "#/components/schemas/TealKeyValueStore"
          },
          "version": {
            "type": "integer",
            "description": "\\[v\\] the number of updates to the application programs",
            "x-algokit-bigint": true
          }
        },
        "description": "Stores the global information associated with an application."
      },
      "DryrunState": {
        "required": [
          "line",
          "pc",
          "stack"
        ],
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "Line number"
          },
          "pc": {
            "type": "integer",
            "description": "Program counter"
          },
          "stack": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TealValue"
            }
          },
          "scratch": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TealValue"
            }
          },
          "error": {
            "type": "string",
            "description": "Evaluation error if any"
          }
        },
        "description": "Stores the TEAL eval step data"
      },
      "DryrunTxnResult": {
        "required": [
          "disassembly"
        ],
        "type": "object",
        "properties": {
          "disassembly": {
            "type": "array",
            "description": "Disassembled program line by line.",
            "items": {
              "type": "string"
            }
          },
          "logic-sig-disassembly": {
            "type": "array",
            "description": "Disassembled lsig program line by line.",
            "items": {
              "type": "string"
            }
          },
          "logic-sig-trace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DryrunState"
            }
          },
          "logic-sig-messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app-call-trace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DryrunState"
            }
          },
          "app-call-messages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "global-delta": {
            "$ref": "#/components/schemas/StateDelta"
          },
          "local-deltas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountStateDelta"
            }
          },
          "logs": {
            "type": "array",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          },
          "budget-added": {
            "type": "integer",
            "description": "Budget added during execution of app call transaction."
          },
          "budget-consumed": {
            "type": "integer",
            "description": "Budget consumed during execution of app call transaction."
          }
        },
        "description": "DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun."
      },
      "ErrorResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {}
          },
          "message": {
            "type": "string"
          }
        },
        "description": "An error response with optional data field."
      },
      "DryrunRequest": {
        "required": [
          "accounts",
          "apps",
          "latest-timestamp",
          "protocol-version",
          "round",
          "sources",
          "txns"
        ],
        "type": "object",
        "properties": {
          "txns": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "SignedTxn object. Must be canonically encoded.",
              "format": "json",
              "x-algokit-signed-txn": true
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "protocol-version": {
            "type": "string",
            "description": "ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in."
          },
          "round": {
            "type": "integer",
            "description": "Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "latest-timestamp": {
            "minimum": 0,
            "type": "integer",
            "description": "LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.",
            "x-go-type": "int64"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DryrunSource"
            }
          }
        },
        "description": "Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information."
      },
      "DryrunSource": {
        "required": [
          "app-index",
          "field-name",
          "source",
          "txn-index"
        ],
        "type": "object",
        "properties": {
          "field-name": {
            "type": "string",
            "description": "FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex]."
          },
          "source": {
            "type": "string"
          },
          "txn-index": {
            "type": "integer",
            "x-algokit-bigint": true
          },
          "app-index": {
            "type": "integer",
            "x-go-type": "basics.AppIndex",
            "x-algokit-bigint": true
          }
        },
        "description": "DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state."
      },
      "SimulateRequest": {
        "required": [
          "txn-groups"
        ],
        "type": "object",
        "properties": {
          "txn-groups": {
            "type": "array",
            "description": "The transaction groups to simulate.",
            "items": {
              "$ref": "#/components/schemas/SimulateRequestTransactionGroup"
            }
          },
          "round": {
            "type": "integer",
            "description": "If provided, specifies the round preceding the simulation. State changes through this round will be used to run this simulation. Usually only the 4 most recent rounds will be available (controlled by the node config value MaxAcctLookback). If not specified, defaults to the latest available round.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "allow-empty-signatures": {
            "type": "boolean",
            "description": "Allows transactions without signatures to be simulated as if they had correct signatures."
          },
          "allow-more-logging": {
            "type": "boolean",
            "description": "Lifts limits on log opcode usage during simulation."
          },
          "allow-unnamed-resources": {
            "type": "boolean",
            "description": "Allows access to unnamed resources during simulation."
          },
          "extra-opcode-budget": {
            "type": "integer",
            "description": "Applies extra opcode budget during simulation for each transaction group."
          },
          "exec-trace-config": {
            "$ref": "#/components/schemas/SimulateTraceConfig"
          },
          "fix-signers": {
            "type": "boolean",
            "description": "If true, signers for transactions that are missing signatures will be fixed during evaluation."
          }
        },
        "description": "Request type for simulation endpoint."
      },
      "SimulateRequestTransactionGroup": {
        "required": [
          "txns"
        ],
        "type": "object",
        "properties": {
          "txns": {
            "type": "array",
            "description": "An atomic transaction group.",
            "items": {
              "type": "string",
              "description": "SignedTxn object. Must be canonically encoded.",
              "format": "json",
              "x-algokit-signed-txn": true
            }
          }
        },
        "description": "A transaction group to simulate."
      },
      "SimulateTraceConfig": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "A boolean option for opting in execution trace features simulation endpoint."
          },
          "stack-change": {
            "type": "boolean",
            "description": "A boolean option enabling returning stack changes together with execution trace during simulation."
          },
          "scratch-change": {
            "type": "boolean",
            "description": "A boolean option enabling returning scratch slot changes together with execution trace during simulation."
          },
          "state-change": {
            "type": "boolean",
            "description": "A boolean option enabling returning application state changes (global, local, and box changes) with the execution trace during simulation."
          }
        },
        "description": "An object that configures simulation execution trace."
      },
      "Box": {
        "required": [
          "name",
          "round",
          "value"
        ],
        "type": "object",
        "properties": {
          "round": {
            "type": "integer",
            "description": "The round for which this information is relevant",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "name": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The box name, base64 encoded",
            "format": "byte"
          },
          "value": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The box value, base64 encoded.",
            "format": "byte"
          }
        },
        "description": "Box name and its content."
      },
      "BoxDescriptor": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded box name",
            "format": "byte"
          }
        },
        "description": "Box descriptor describes a Box."
      },
      "BoxReference": {
        "required": [
          "app",
          "name"
        ],
        "type": "object",
        "properties": {
          "app": {
            "type": "integer",
            "description": "Application ID which this box belongs to",
            "x-go-type": "basics.AppIndex"
          },
          "name": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoded box name",
            "format": "byte"
          }
        },
        "description": "References a box of an application."
      },
      "Version": {
        "title": "Version contains the current algod version.",
        "required": [
          "build",
          "genesis_hash_b64",
          "genesis_id",
          "versions"
        ],
        "type": "object",
        "properties": {
          "build": {
            "$ref": "#/components/schemas/BuildVersion"
          },
          "genesis_hash_b64": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          },
          "genesis_id": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "algod version information."
      },
      "DebugSettingsProf": {
        "title": "algod mutex and blocking profiling state.",
        "type": "object",
        "properties": {
          "block-rate": {
            "type": "integer",
            "description": "The rate of blocking events. The profiler aims to sample an average of one blocking event per rate nanoseconds spent blocked. To turn off profiling entirely, pass rate 0.",
            "format": "uint64",
            "example": 1000,
            "x-algokit-bigint": true
          },
          "mutex-rate": {
            "type": "integer",
            "description": "The rate of mutex events. On average 1/rate events are reported. To turn off profiling entirely, pass rate 0",
            "format": "uint64",
            "example": 1000,
            "x-algokit-bigint": true
          }
        },
        "description": "algod mutex and blocking profiling state."
      },
      "BuildVersion": {
        "title": "BuildVersion contains the current algod build version information.",
        "required": [
          "branch",
          "build_number",
          "channel",
          "commit_hash",
          "major",
          "minor"
        ],
        "type": "object",
        "properties": {
          "branch": {
            "type": "string"
          },
          "build_number": {
            "type": "integer"
          },
          "channel": {
            "type": "string"
          },
          "commit_hash": {
            "type": "string"
          },
          "major": {
            "type": "integer"
          },
          "minor": {
            "type": "integer"
          }
        }
      },
      "PendingTransactionResponse": {
        "required": [
          "pool-error",
          "txn"
        ],
        "type": "object",
        "properties": {
          "asset-index": {
            "type": "integer",
            "description": "The asset index if the transaction was found and it created an asset.",
            "x-go-type": "basics.AssetIndex",
            "x-algokit-field-rename": "asset_id",
            "x-algokit-bigint": true
          },
          "application-index": {
            "type": "integer",
            "description": "The application index if the transaction was found and it created an application.",
            "x-go-type": "basics.AppIndex",
            "x-algokit-field-rename": "app_id",
            "x-algokit-bigint": true
          },
          "close-rewards": {
            "type": "integer",
            "description": "Rewards in microalgos applied to the close remainder to account."
          },
          "closing-amount": {
            "type": "integer",
            "description": "Closing amount for the transaction.",
            "x-algokit-bigint": true
          },
          "asset-closing-amount": {
            "type": "integer",
            "description": "The number of the asset's unit that were transferred to the close-to address.",
            "x-algokit-bigint": true
          },
          "confirmed-round": {
            "type": "integer",
            "description": "The round where this transaction was confirmed, if present.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "pool-error": {
            "type": "string",
            "description": "Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.\n"
          },
          "receiver-rewards": {
            "type": "integer",
            "description": "Rewards in microalgos applied to the receiver account.",
            "x-algokit-bigint": true
          },
          "sender-rewards": {
            "type": "integer",
            "description": "Rewards in microalgos applied to the sender account.",
            "x-algokit-bigint": true
          },
          "local-state-delta": {
            "type": "array",
            "description": "Local state key/value changes for the application being executed by this transaction.",
            "items": {
              "$ref": "#/components/schemas/AccountStateDelta"
            }
          },
          "global-state-delta": {
            "$ref": "#/components/schemas/StateDelta"
          },
          "logs": {
            "type": "array",
            "description": "Logs for the application being executed by this transaction.",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          },
          "inner-txns": {
            "type": "array",
            "description": "Inner transactions produced by application execution.",
            "items": {
              "$ref": "#/components/schemas/PendingTransactionResponse"
            }
          },
          "txn": {
            "type": "object",
            "properties": {},
            "description": "The raw signed transaction.",
            "x-algokit-signed-txn": true
          }
        },
        "description": "Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details."
      },
      "SimulateTransactionGroupResult": {
        "required": [
          "txn-results"
        ],
        "type": "object",
        "properties": {
          "txn-results": {
            "type": "array",
            "description": "Simulation result for individual transactions",
            "items": {
              "$ref": "#/components/schemas/SimulateTransactionResult"
            }
          },
          "failure-message": {
            "type": "string",
            "description": "If present, indicates that the transaction group failed and specifies why that happened"
          },
          "failed-at": {
            "type": "array",
            "description": "If present, indicates which transaction in this group caused the failure. This array represents the path to the failing transaction. Indexes are zero based, the first element indicates the top-level transaction, and successive elements indicate deeper inner transactions.",
            "items": {
              "type": "integer"
            }
          },
          "app-budget-added": {
            "type": "integer",
            "description": "Total budget added during execution of app calls in the transaction group."
          },
          "app-budget-consumed": {
            "type": "integer",
            "description": "Total budget consumed during execution of app calls in the transaction group."
          },
          "unnamed-resources-accessed": {
            "$ref": "#/components/schemas/SimulateUnnamedResourcesAccessed"
          }
        },
        "description": "Simulation result for an atomic transaction group"
      },
      "SimulateTransactionResult": {
        "required": [
          "txn-result"
        ],
        "type": "object",
        "properties": {
          "txn-result": {
            "$ref": "#/components/schemas/PendingTransactionResponse"
          },
          "app-budget-consumed": {
            "type": "integer",
            "description": "Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction."
          },
          "logic-sig-budget-consumed": {
            "type": "integer",
            "description": "Budget used during execution of a logic sig transaction."
          },
          "exec-trace": {
            "$ref": "#/components/schemas/SimulationTransactionExecTrace"
          },
          "unnamed-resources-accessed": {
            "$ref": "#/components/schemas/SimulateUnnamedResourcesAccessed"
          },
          "fixed-signer": {
            "type": "string",
            "description": "The account that needed to sign this transaction when no signature was provided and the provided signer was incorrect.",
            "x-algorand-format": "Address"
          }
        },
        "description": "Simulation result for an individual transaction"
      },
      "StateProof": {
        "required": [
          "Message",
          "StateProof"
        ],
        "type": "object",
        "properties": {
          "Message": {
            "$ref": "#/components/schemas/StateProofMessage"
          },
          "StateProof": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The encoded StateProof for the message.",
            "format": "byte"
          }
        },
        "description": "Represents a state proof and its corresponding message"
      },
      "LightBlockHeaderProof": {
        "required": [
          "index",
          "proof",
          "treedepth"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The index of the light block header in the vector commitment tree",
            "x-algokit-bigint": true
          },
          "treedepth": {
            "type": "integer",
            "description": "Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root."
          },
          "proof": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The encoded proof.",
            "format": "byte"
          }
        },
        "description": "Proof of membership and position of a light block header."
      },
      "StateProofMessage": {
        "required": [
          "BlockHeadersCommitment",
          "FirstAttestedRound",
          "LastAttestedRound",
          "LnProvenWeight",
          "VotersCommitment"
        ],
        "type": "object",
        "properties": {
          "BlockHeadersCommitment": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The vector commitment root on all light block headers within a state proof interval.",
            "format": "byte"
          },
          "VotersCommitment": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The vector commitment root of the top N accounts to sign the next StateProof.",
            "format": "byte"
          },
          "LnProvenWeight": {
            "type": "integer",
            "description": "An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.",
            "format": "uint64",
            "x-algokit-bigint": true
          },
          "FirstAttestedRound": {
            "type": "integer",
            "description": "The first round the message attests to.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          },
          "LastAttestedRound": {
            "type": "integer",
            "description": "The last round the message attests to.",
            "x-go-type": "basics.Round",
            "x-algokit-bigint": true
          }
        },
        "description": "Represents the message that the state proofs are attesting to."
      },
      "SimulationEvalOverrides": {
        "type": "object",
        "properties": {
          "allow-empty-signatures": {
            "type": "boolean",
            "description": "If true, transactions without signatures are allowed and simulated as if they were properly signed."
          },
          "allow-unnamed-resources": {
            "type": "boolean",
            "description": "If true, allows access to unnamed resources during simulation."
          },
          "max-log-calls": {
            "type": "integer",
            "description": "The maximum log calls one can make during simulation"
          },
          "max-log-size": {
            "type": "integer",
            "description": "The maximum byte number to log during simulation"
          },
          "extra-opcode-budget": {
            "type": "integer",
            "description": "The extra opcode budget added to each transaction group during simulation"
          },
          "fix-signers": {
            "type": "boolean",
            "description": "If true, signers for transactions that are missing signatures will be fixed during evaluation."
          }
        },
        "description": "The set of parameters and limits override during simulation. If this set of parameters is present, then evaluation parameters may differ from standard evaluation in certain ways."
      },
      "ScratchChange": {
        "required": [
          "new-value",
          "slot"
        ],
        "type": "object",
        "properties": {
          "slot": {
            "type": "integer",
            "description": "The scratch slot written."
          },
          "new-value": {
            "$ref": "#/components/schemas/AvmValue"
          }
        },
        "description": "A write operation into a scratch slot."
      },
      "ApplicationStateOperation": {
        "required": [
          "app-state-type",
          "key",
          "operation"
        ],
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "Operation type. Value `w` is **write**, `d` is **delete**."
          },
          "app-state-type": {
            "type": "string",
            "description": "Type of application state. Value `g` is **global state**, `l` is **local state**, `b` is **boxes**."
          },
          "key": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "The key (name) of the global/local/box state.",
            "format": "byte"
          },
          "new-value": {
            "$ref": "#/components/schemas/AvmValue"
          },
          "account": {
            "type": "string",
            "description": "For local state changes, the address of the account associated with the local state.",
            "x-algorand-format": "Address"
          }
        },
        "description": "An operation against an application's global/local/box state."
      },
      "ApplicationKVStorage": {
        "required": [
          "kvs"
        ],
        "type": "object",
        "properties": {
          "kvs": {
            "type": "array",
            "description": "Key-Value pairs representing application states.",
            "items": {
              "$ref": "#/components/schemas/AvmKeyValue"
            }
          },
          "account": {
            "type": "string",
            "description": "The address of the account associated with the local state.",
            "x-algorand-format": "Address"
          }
        },
        "description": "An application's global/local/box state."
      },
      "ApplicationInitialStates": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Application index.",
            "x-go-type": "basics.AppIndex",
            "x-algokit-bigint": true
          },
          "app-locals": {
            "type": "array",
            "description": "An application's initial local states tied to different accounts.",
            "items": {
              "$ref": "#/components/schemas/ApplicationKVStorage"
            }
          },
          "app-globals": {
            "$ref": "#/components/schemas/ApplicationKVStorage"
          },
          "app-boxes": {
            "$ref": "#/components/schemas/ApplicationKVStorage"
          }
        },
        "description": "An application's initial global/local/box states that were accessed during simulation."
      },
      "SimulationOpcodeTraceUnit": {
        "required": [
          "pc"
        ],
        "type": "object",
        "properties": {
          "pc": {
            "type": "integer",
            "description": "The program counter of the current opcode being evaluated."
          },
          "scratch-changes": {
            "type": "array",
            "description": "The writes into scratch slots.",
            "items": {
              "$ref": "#/components/schemas/ScratchChange"
            }
          },
          "state-changes": {
            "type": "array",
            "description": "The operations against the current application's states.",
            "items": {
              "$ref": "#/components/schemas/ApplicationStateOperation"
            }
          },
          "spawned-inners": {
            "type": "array",
            "description": "The indexes of the traces for inner transactions spawned by this opcode, if any.",
            "items": {
              "type": "integer"
            }
          },
          "stack-pop-count": {
            "type": "integer",
            "description": "The number of deleted stack values by this opcode."
          },
          "stack-additions": {
            "type": "array",
            "description": "The values added by this opcode to the stack.",
            "items": {
              "$ref": "#/components/schemas/AvmValue"
            }
          }
        },
        "description": "The set of trace information and effect from evaluating a single opcode."
      },
      "SimulationTransactionExecTrace": {
        "type": "object",
        "properties": {
          "approval-program-trace": {
            "type": "array",
            "description": "Program trace that contains a trace of opcode effects in an approval program.",
            "items": {
              "$ref": "#/components/schemas/SimulationOpcodeTraceUnit"
            }
          },
          "approval-program-hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "SHA512_256 hash digest of the approval program executed in transaction.",
            "format": "byte"
          },
          "clear-state-program-trace": {
            "type": "array",
            "description": "Program trace that contains a trace of opcode effects in a clear state program.",
            "items": {
              "$ref": "#/components/schemas/SimulationOpcodeTraceUnit"
            }
          },
          "clear-state-program-hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "SHA512_256 hash digest of the clear state program executed in transaction.",
            "format": "byte"
          },
          "clear-state-rollback": {
            "type": "boolean",
            "description": "If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits."
          },
          "clear-state-rollback-error": {
            "type": "string",
            "description": "The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error."
          },
          "logic-sig-trace": {
            "type": "array",
            "description": "Program trace that contains a trace of opcode effects in a logic sig.",
            "items": {
              "$ref": "#/components/schemas/SimulationOpcodeTraceUnit"
            }
          },
          "logic-sig-hash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "SHA512_256 hash digest of the logic sig executed in transaction.",
            "format": "byte"
          },
          "inner-trace": {
            "type": "array",
            "description": "An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.",
            "items": {
              "$ref": "#/components/schemas/SimulationTransactionExecTrace"
            }
          }
        },
        "description": "The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way."
      },
      "SimulateUnnamedResourcesAccessed": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "description": "The unnamed accounts that were referenced. The order of this array is arbitrary.",
            "items": {
              "type": "string",
              "x-algorand-format": "Address"
            }
          },
          "assets": {
            "type": "array",
            "description": "The unnamed assets that were referenced. The order of this array is arbitrary.",
            "items": {
              "type": "integer",
              "x-go-type": "basics.AssetIndex",
              "x-algokit-bigint": true
            }
          },
          "apps": {
            "type": "array",
            "description": "The unnamed applications that were referenced. The order of this array is arbitrary.",
            "items": {
              "type": "integer",
              "x-go-type": "basics.AppIndex",
              "x-algokit-bigint": true
            }
          },
          "boxes": {
            "type": "array",
            "description": "The unnamed boxes that were referenced. The order of this array is arbitrary.",
            "items": {
              "$ref": "#/components/schemas/BoxReference"
            }
          },
          "extra-box-refs": {
            "type": "integer",
            "description": "The number of extra box references used to increase the IO budget. This is in addition to the references defined in the input transaction group and any referenced to unnamed boxes."
          },
          "asset-holdings": {
            "type": "array",
            "description": "The unnamed asset holdings that were referenced. The order of this array is arbitrary.",
            "items": {
              "$ref": "#/components/schemas/AssetHoldingReference"
            }
          },
          "app-locals": {
            "type": "array",
            "description": "The unnamed application local states that were referenced. The order of this array is arbitrary.",
            "items": {
              "$ref": "#/components/schemas/ApplicationLocalReference"
            }
          }
        },
        "description": "These are resources that were accessed by this group that would normally have caused failure, but were allowed in simulation. Depending on where this object is in the response, the unnamed resources it contains may or may not qualify for group resource sharing. If this is a field in SimulateTransactionGroupResult, the resources do qualify, but if this is a field in SimulateTransactionResult, they do not qualify. In order to make this group valid for actual submission, resources that qualify for group sharing can be made available by any transaction of the group; otherwise, resources must be placed in the same transaction which accessed them."
      },
      "SimulateInitialStates": {
        "type": "object",
        "properties": {
          "app-initial-states": {
            "type": "array",
            "description": "The initial states of accessed application before simulation. The order of this array is arbitrary.",
            "items": {
              "$ref": "#/components/schemas/ApplicationInitialStates"
            }
          }
        },
        "description": "Initial states of resources that were accessed during simulation."
      },
      "AppCallLogs": {
        "required": [
          "application-index",
          "logs",
          "txId"
        ],
        "type": "object",
        "properties": {
          "logs": {
            "type": "array",
            "description": "An array of logs",
            "items": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            }
          },
          "application-index": {
            "type": "integer",
            "description": "The application from which the logs were generated",
            "x-go-type": "basics.AppIndex",
            "x-algokit-field-rename": "app_id",
            "x-algokit-bigint": true
          },
          "txId": {
            "type": "string",
            "description": "The transaction ID of the outer app call that lead to these logs"
          }
        },
        "description": "The logged messages from an app call along with the app ID and outer transaction ID. Logs appear in the same order that they were emitted."
      },
      "TransactionProof": {
        "required": [
          "hashtype",
          "idx",
          "proof",
          "stibhash",
          "treedepth"
        ],
        "type": "object",
        "properties": {
          "proof": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Proof of transaction membership.",
            "format": "byte"
          },
          "stibhash": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Hash of SignedTxnInBlock for verifying proof.",
            "format": "byte"
          },
          "treedepth": {
            "type": "integer",
            "description": "Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.",
            "x-algokit-bigint": true
          },
          "idx": {
            "type": "integer",
            "description": "Index of the transaction in the block's payset.",
            "x-algokit-bigint": true
          },
          "hashtype": {
            "type": "string",
            "description": "The type of hash function used to create the proof, must be one of: \n* sha512_256 \n* sha256",
            "enum": [
              "sha512_256",
              "sha256"
            ]
          }
        },
        "description": "Proof of transaction in a block."
      }
    },
    "responses": {
      "GetBlockTimeStampOffsetResponse": {
        "description": "Response containing the timestamp offset in seconds",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "offset"
              ],
              "type": "object",
              "properties": {
                "offset": {
                  "type": "integer",
                  "description": "Timestamp offset in seconds.",
                  "x-algokit-bigint": true
                }
              }
            }
          }
        }
      },
      "GetSyncRoundResponse": {
        "description": "Response containing the ledger's minimum sync round",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "round"
              ],
              "type": "object",
              "properties": {
                "round": {
                  "type": "integer",
                  "description": "The minimum sync round for the ledger.",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                }
              }
            }
          }
        }
      },
      "LedgerStateDeltaForTransactionGroupResponse": {
        "description": "Response containing a ledger state delta for a single transaction group.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LedgerStateDelta"
            }
          }
        }
      },
      "TransactionGroupLedgerStateDeltasForRoundResponse": {
        "description": "Response containing all ledger state deltas for transaction groups, with their associated Ids, in a single round.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "Deltas"
              ],
              "type": "object",
              "properties": {
                "Deltas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerStateDeltaForTransactionGroup"
                  }
                }
              }
            }
          }
        }
      },
      "LedgerStateDeltaResponse": {
        "description": "Contains ledger deltas",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LedgerStateDelta"
            }
          }
        }
      },
      "LightBlockHeaderProofResponse": {
        "description": "Proof of a light block header.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LightBlockHeaderProof"
            }
          }
        }
      },
      "StateProofResponse": {
        "description": "StateProofResponse wraps the StateProof type in a response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/StateProof"
            }
          }
        }
      },
      "AccountResponse": {
        "description": "AccountResponse wraps the Account type in a response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "AccountAssetResponse": {
        "description": "AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "round"
              ],
              "type": "object",
              "properties": {
                "round": {
                  "type": "integer",
                  "description": "The round for which this information is relevant.",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "asset-holding": {
                  "$ref": "#/components/schemas/AssetHolding"
                },
                "created-asset": {
                  "$ref": "#/components/schemas/AssetParams"
                }
              }
            }
          }
        }
      },
      "AccountAssetsInformationResponse": {
        "description": "AccountAssetsInformationResponse contains a list of assets held by an account.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "round"
              ],
              "type": "object",
              "properties": {
                "round": {
                  "type": "integer",
                  "description": "The round for which this information is relevant.",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "next-token": {
                  "type": "string",
                  "description": "Used for pagination, when making another request provide this token with the next parameter."
                },
                "asset-holdings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountAssetHolding"
                  }
                }
              }
            }
          }
        }
      },
      "AccountApplicationResponse": {
        "description": "AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "round"
              ],
              "type": "object",
              "properties": {
                "round": {
                  "type": "integer",
                  "description": "The round for which this information is relevant.",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "app-local-state": {
                  "$ref": "#/components/schemas/ApplicationLocalState"
                },
                "created-app": {
                  "$ref": "#/components/schemas/ApplicationParams"
                }
              }
            }
          }
        }
      },
      "BlockResponse": {
        "description": "Encoded block object.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "block"
              ],
              "type": "object",
              "properties": {
                "block": {
                  "type": "object",
                  "properties": {},
                  "description": "Block header data.",
                  "x-algorand-format": "BlockHeader"
                },
                "cert": {
                  "type": "object",
                  "properties": {},
                  "description": "Optional certificate object. This is only included when the format is set to message pack.",
                  "x-algorand-format": "BlockCertificate"
                }
              }
            }
          }
        }
      },
      "BlockTxidsResponse": {
        "description": "Top level transaction IDs in a block.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "blockTxids"
              ],
              "type": "object",
              "properties": {
                "blockTxids": {
                  "type": "array",
                  "description": "Block transaction IDs.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "BlockHashResponse": {
        "description": "Hash of a block header.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "blockHash"
              ],
              "type": "object",
              "properties": {
                "blockHash": {
                  "type": "string",
                  "description": "Block header hash."
                }
              }
            }
          }
        }
      },
      "TransactionProofResponse": {
        "description": "Proof of transaction in a block.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionProof"
            }
          }
        }
      },
      "CatchpointStartResponse": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "catchup-message"
              ],
              "type": "object",
              "properties": {
                "catchup-message": {
                  "type": "string",
                  "description": "Catchup start response string"
                }
              },
              "description": "An catchpoint start response."
            }
          }
        },
        "description": "Catchpoint start operation response"
      },
      "CatchpointAbortResponse": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "catchup-message"
              ],
              "type": "object",
              "properties": {
                "catchup-message": {
                  "type": "string",
                  "description": "Catchup abort response string"
                }
              },
              "description": "An catchpoint abort response."
            }
          }
        },
        "description": "Catchpoint abort operation response"
      },
      "NodeStatusResponse": {
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "catchup-time",
                "last-round",
                "last-version",
                "next-version",
                "next-version-round",
                "next-version-supported",
                "stopped-at-unsupported-round",
                "time-since-last-round"
              ],
              "type": "object",
              "properties": {
                "catchup-time": {
                  "type": "integer",
                  "description": "CatchupTime in nanoseconds",
                  "x-go-type": "int64",
                  "x-algokit-bigint": true
                },
                "last-round": {
                  "type": "integer",
                  "description": "LastRound indicates the last round seen",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "last-version": {
                  "type": "string",
                  "description": "LastVersion indicates the last consensus version supported"
                },
                "next-version": {
                  "type": "string",
                  "description": "NextVersion of consensus protocol to use"
                },
                "next-version-round": {
                  "type": "integer",
                  "description": "NextVersionRound is the round at which the next consensus version will apply",
                  "x-go-type": "basics.Round"
                },
                "next-version-supported": {
                  "type": "boolean",
                  "description": "NextVersionSupported indicates whether the next consensus version is supported by this node"
                },
                "stopped-at-unsupported-round": {
                  "type": "boolean",
                  "description": "StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress"
                },
                "time-since-last-round": {
                  "type": "integer",
                  "description": "TimeSinceLastRound in nanoseconds",
                  "x-go-type": "int64",
                  "x-algokit-bigint": true
                },
                "last-catchpoint": {
                  "type": "string",
                  "description": "The last catchpoint seen by the node"
                },
                "catchpoint": {
                  "type": "string",
                  "description": "The current catchpoint that is being caught up to"
                },
                "catchpoint-total-accounts": {
                  "type": "integer",
                  "description": "The total number of accounts included in the current catchpoint",
                  "x-algokit-bigint": true
                },
                "catchpoint-processed-accounts": {
                  "type": "integer",
                  "description": "The number of accounts from the current catchpoint that have been processed so far as part of the catchup",
                  "x-algokit-bigint": true
                },
                "catchpoint-verified-accounts": {
                  "type": "integer",
                  "description": "The number of accounts from the current catchpoint that have been verified so far as part of the catchup",
                  "x-algokit-bigint": true
                },
                "catchpoint-total-kvs": {
                  "type": "integer",
                  "description": "The total number of key-values (KVs) included in the current catchpoint",
                  "x-algokit-bigint": true
                },
                "catchpoint-processed-kvs": {
                  "type": "integer",
                  "description": "The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup",
                  "x-algokit-bigint": true
                },
                "catchpoint-verified-kvs": {
                  "type": "integer",
                  "description": "The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup",
                  "x-algokit-bigint": true
                },
                "catchpoint-total-blocks": {
                  "type": "integer",
                  "description": "The total number of blocks that are required to complete the current catchpoint catchup",
                  "x-algokit-bigint": true
                },
                "catchpoint-acquired-blocks": {
                  "type": "integer",
                  "description": "The number of blocks that have already been obtained by the node as part of the catchup",
                  "x-algokit-bigint": true
                },
                "upgrade-delay": {
                  "type": "integer",
                  "description": "Upgrade delay",
                  "x-go-type": "basics.Round"
                },
                "upgrade-node-vote": {
                  "type": "boolean",
                  "description": "This node's upgrade vote"
                },
                "upgrade-votes-required": {
                  "type": "integer",
                  "description": "Yes votes required for consensus upgrade",
                  "x-go-type": "basics.Round"
                },
                "upgrade-votes": {
                  "type": "integer",
                  "description": "Total votes cast for consensus upgrade",
                  "x-go-type": "basics.Round"
                },
                "upgrade-yes-votes": {
                  "type": "integer",
                  "description": "Yes votes cast for consensus upgrade",
                  "x-go-type": "basics.Round"
                },
                "upgrade-no-votes": {
                  "type": "integer",
                  "description": "No votes cast for consensus upgrade",
                  "x-go-type": "basics.Round"
                },
                "upgrade-next-protocol-vote-before": {
                  "type": "integer",
                  "description": "Next protocol round",
                  "x-go-type": "basics.Round"
                },
                "upgrade-vote-rounds": {
                  "type": "integer",
                  "description": "Total voting rounds for current upgrade",
                  "x-go-type": "basics.Round"
                }
              },
              "description": "NodeStatus contains the information about a node status"
            }
          }
        },
        "description": "Returns the current status of the node"
      },
      "PendingTransactionsResponse": {
        "description": "A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "top-transactions",
                "total-transactions"
              ],
              "type": "object",
              "properties": {
                "top-transactions": {
                  "type": "array",
                  "description": "An array of signed transaction objects.",
                  "items": {
                    "type": "object",
                    "properties": {},
                    "x-algokit-signed-txn": true
                  }
                },
                "total-transactions": {
                  "type": "integer",
                  "description": "Total number of transactions in the pool."
                }
              },
              "description": "PendingTransactions is an array of signed transactions exactly as they were submitted."
            }
          }
        }
      },
      "ParticipationKeysResponse": {
        "description": "A list of participation keys",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ParticipationKey"
              }
            }
          }
        }
      },
      "ParticipationKeyResponse": {
        "description": "A detailed description of a participation ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParticipationKey"
            }
          }
        }
      },
      "PostParticipationResponse": {
        "description": "Participation ID of the submission",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "partId"
              ],
              "type": "object",
              "properties": {
                "partId": {
                  "type": "string",
                  "description": "encoding of the participation ID."
                }
              }
            }
          }
        }
      },
      "PostTransactionsResponse": {
        "description": "Transaction ID of the submission.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "txId"
              ],
              "type": "object",
              "properties": {
                "txId": {
                  "type": "string",
                  "description": "encoding of the transaction hash."
                }
              }
            }
          }
        }
      },
      "SimulateResponse": {
        "description": "Result of a transaction group simulation.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "last-round",
                "txn-groups",
                "version"
              ],
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "description": "The version of this response object.",
                  "x-algokit-bigint": true
                },
                "last-round": {
                  "type": "integer",
                  "description": "The round immediately preceding this simulation. State changes through this round were used to run this simulation.",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "txn-groups": {
                  "type": "array",
                  "description": "A result object for each transaction group that was simulated.",
                  "items": {
                    "$ref": "#/components/schemas/SimulateTransactionGroupResult"
                  }
                },
                "eval-overrides": {
                  "$ref": "#/components/schemas/SimulationEvalOverrides"
                },
                "exec-trace-config": {
                  "$ref": "#/components/schemas/SimulateTraceConfig"
                },
                "initial-states": {
                  "$ref": "#/components/schemas/SimulateInitialStates"
                }
              }
            }
          }
        }
      },
      "BlockLogsResponse": {
        "description": "All logs emitted in the given round. Each app call, whether top-level or inner, that contains logs results in a separate AppCallLogs object. Therefore there may be multiple AppCallLogs with the same application ID and outer transaction ID in the event of multiple inner app calls to the same app. App calls with no logs are not included in the response. AppCallLogs are returned in the same order that their corresponding app call appeared in the block (pre-order traversal of inner app calls)",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "logs"
              ],
              "type": "object",
              "properties": {
                "logs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppCallLogs"
                  }
                }
              }
            }
          }
        }
      },
      "SupplyResponse": {
        "description": "Supply represents the current supply of MicroAlgos in the system.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "current_round",
                "online-money",
                "total-money"
              ],
              "type": "object",
              "properties": {
                "current_round": {
                  "type": "integer",
                  "description": "Round",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "online-money": {
                  "type": "integer",
                  "description": "OnlineMoney",
                  "x-algokit-bigint": true
                },
                "total-money": {
                  "type": "integer",
                  "description": "TotalMoney",
                  "x-algokit-bigint": true
                }
              },
              "description": "Supply represents the current supply of MicroAlgos in the system"
            }
          }
        }
      },
      "TransactionParametersResponse": {
        "description": "TransactionParams contains the parameters that help a client construct a new transaction.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "consensus-version",
                "fee",
                "genesis-hash",
                "genesis-id",
                "last-round",
                "min-fee"
              ],
              "type": "object",
              "properties": {
                "consensus-version": {
                  "type": "string",
                  "description": "ConsensusVersion indicates the consensus protocol version\nas of LastRound."
                },
                "fee": {
                  "type": "integer",
                  "description": "Fee is the suggested transaction fee\nFee is in units of micro-Algos per byte.\nFee may fall to zero but transactions must still have a fee of\nat least MinTxnFee for the current network protocol.",
                  "x-algokit-bigint": true
                },
                "genesis-hash": {
                  "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
                  "type": "string",
                  "description": "GenesisHash is the hash of the genesis block.",
                  "format": "byte"
                },
                "genesis-id": {
                  "type": "string",
                  "description": "GenesisID is an ID listed in the genesis block."
                },
                "last-round": {
                  "type": "integer",
                  "description": "LastRound indicates the last round seen",
                  "x-go-type": "basics.Round",
                  "x-algokit-bigint": true
                },
                "min-fee": {
                  "type": "integer",
                  "description": "The minimum transaction fee (not per byte) required for the\ntxn to validate for the current network protocol.",
                  "x-algokit-bigint": true
                }
              },
              "description": "TransactionParams contains the parameters that help a client construct\na new transaction."
            }
          }
        }
      },
      "ApplicationResponse": {
        "description": "Application information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Application"
            }
          }
        }
      },
      "BoxesResponse": {
        "description": "Box names of an application",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "boxes"
              ],
              "type": "object",
              "properties": {
                "boxes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BoxDescriptor"
                  }
                }
              }
            }
          }
        }
      },
      "BoxResponse": {
        "description": "Box information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Box"
            }
          }
        }
      },
      "AssetResponse": {
        "description": "Asset information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        }
      },
      "CompileResponse": {
        "description": "Teal compile Result",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "hash",
                "result"
              ],
              "type": "object",
              "properties": {
                "hash": {
                  "type": "string",
                  "description": "base32 SHA512_256 of program bytes (Address style)"
                },
                "result": {
                  "type": "string",
                  "description": "base64 encoded program bytes"
                },
                "sourcemap": {
                  "type": "object",
                  "properties": {},
                  "description": "JSON of the source map"
                }
              }
            }
          }
        }
      },
      "DisassembleResponse": {
        "description": "Teal disassembly Result",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "result"
              ],
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "description": "disassembled Teal code"
                }
              }
            }
          }
        }
      },
      "DryrunResponse": {
        "description": "DryrunResponse contains per-txn debug information from a dryrun.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "error",
                "protocol-version",
                "txns"
              ],
              "type": "object",
              "properties": {
                "txns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DryrunTxnResult"
                  }
                },
                "error": {
                  "type": "string"
                },
                "protocol-version": {
                  "type": "string",
                  "description": "Protocol version is the protocol version Dryrun was operated under."
                }
              }
            }
          }
        }
      },
      "VersionsResponse": {
        "description": "VersionsResponse is the response to 'GET /versions'",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Version"
            }
          }
        }
      },
      "DebugSettingsProfResponse": {
        "description": "DebugPprof is the response to the /debug/extra/pprof endpoint",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DebugSettingsProf"
            }
          }
        }
      }
    },
    "parameters": {
      "catchpoint": {
        "name": "catchpoint",
        "in": "path",
        "description": "A catch point",
        "required": true,
        "schema": {
          "pattern": "[0-9]{1,10}#[A-Z0-9]{1,53}",
          "type": "string",
          "format": "catchpoint",
          "x-algorand-format": "Catchpoint String"
        },
        "x-algorand-format": "Catchpoint String"
      },
      "format": {
        "name": "format",
        "in": "query",
        "description": "Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.",
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "msgpack"
          ]
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of results to return.",
        "schema": {
          "type": "integer",
          "x-algokit-bigint": true
        },
        "x-algokit-bigint": true
      },
      "max": {
        "name": "max",
        "in": "query",
        "description": "Truncated number of transactions to display. If max=0, returns all pending txns.",
        "schema": {
          "type": "integer",
          "x-algokit-bigint": true
        },
        "x-algokit-bigint": true
      },
      "next": {
        "name": "next",
        "in": "query",
        "description": "The next page of results. Use the next token provided by the previous results.",
        "schema": {
          "type": "string"
        }
      },
      "round": {
        "name": "round",
        "in": "path",
        "description": "A round number.",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer",
          "x-go-type": "basics.Round"
        },
        "x-go-type": "basics.Round"
      },
      "address": {
        "name": "address",
        "in": "path",
        "description": "An account public key.",
        "required": true,
        "schema": {
          "pattern": "[A-Z0-9]{58}",
          "type": "string",
          "x-go-type": "basics.Address"
        },
        "x-go-type": "basics.Address"
      },
      "asset-id": {
        "name": "asset-id",
        "in": "path",
        "description": "An asset identifier.",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer",
          "x-go-type": "basics.AssetIndex"
        },
        "x-go-type": "basics.AssetIndex"
      },
      "application-id": {
        "name": "application-id",
        "in": "path",
        "description": "An application identifier.",
        "required": true,
        "schema": {
          "minimum": 0,
          "type": "integer",
          "x-go-type": "basics.AppIndex"
        },
        "x-go-type": "basics.AppIndex"
      },
      "sig-type": {
        "name": "sig-type",
        "in": "query",
        "description": "SigType filters just results using the specified type of signature:\n* sig - Standard\n* msig - MultiSig\n* lsig - LogicSig",
        "schema": {
          "type": "string",
          "enum": [
            "sig",
            "msig",
            "lsig"
          ]
        }
      },
      "tx-id": {
        "name": "tx-id",
        "in": "query",
        "description": "Lookup the specific transaction by ID.",
        "schema": {
          "type": "string",
          "x-algorand-format": "Address",
          "x-go-name": "TxID"
        },
        "x-algorand-format": "Address",
        "x-go-name": "TxID"
      },
      "tx-type": {
        "name": "tx-type",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "pay",
            "keyreg",
            "acfg",
            "axfer",
            "afrz",
            "appl",
            "stpf"
          ]
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "Generated header parameter. This token can be generated using the Goal command line tool. Example value ='b7e384d0317b8050ce45900a94a1931e28540e1f69b2d242b424659c341b4697'",
        "name": "X-Algo-API-Token",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}