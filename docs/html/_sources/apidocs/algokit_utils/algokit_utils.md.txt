---
orphan: true
---

# {py:mod}`algokit_utils`

```{py:module} algokit_utils
```

```{autodoc2-docstring} algokit_utils
:parser: myst
:allowtitles:
```

## Package Contents

### Classes

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`ABICallArgs <algokit_utils.deploy.ABICallArgs>`
  - ```{autodoc2-docstring} algokit_utils.deploy.ABICallArgs
    :parser: myst
    :summary:
    ```
* - {py:obj}`ABICallArgsDict <algokit_utils.deploy.ABICallArgsDict>`
  - ```{autodoc2-docstring} algokit_utils.deploy.ABICallArgsDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`ABICreateCallArgs <algokit_utils.deploy.ABICreateCallArgs>`
  - ```{autodoc2-docstring} algokit_utils.deploy.ABICreateCallArgs
    :parser: myst
    :summary:
    ```
* - {py:obj}`ABICreateCallArgsDict <algokit_utils.deploy.ABICreateCallArgsDict>`
  - ```{autodoc2-docstring} algokit_utils.deploy.ABICreateCallArgsDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`ABITransactionResponse <algokit_utils.models.ABITransactionResponse>`
  - ```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse
    :parser: myst
    :summary:
    ```
* - {py:obj}`Account <algokit_utils.models.Account>`
  - ```{autodoc2-docstring} algokit_utils.models.Account
    :parser: myst
    :summary:
    ```
* - {py:obj}`AlgoClientConfig <algokit_utils.network_clients.AlgoClientConfig>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.AlgoClientConfig
    :parser: myst
    :summary:
    ```
* - {py:obj}`AppDeployMetaData <algokit_utils.deploy.AppDeployMetaData>`
  - ```{autodoc2-docstring} algokit_utils.deploy.AppDeployMetaData
    :parser: myst
    :summary:
    ```
* - {py:obj}`AppLookup <algokit_utils.deploy.AppLookup>`
  - ```{autodoc2-docstring} algokit_utils.deploy.AppLookup
    :parser: myst
    :summary:
    ```
* - {py:obj}`AppMetaData <algokit_utils.deploy.AppMetaData>`
  - ```{autodoc2-docstring} algokit_utils.deploy.AppMetaData
    :parser: myst
    :summary:
    ```
* - {py:obj}`AppReference <algokit_utils.deploy.AppReference>`
  - ```{autodoc2-docstring} algokit_utils.deploy.AppReference
    :parser: myst
    :summary:
    ```
* - {py:obj}`ApplicationClient <algokit_utils.application_client.ApplicationClient>`
  - ```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient
    :parser: myst
    :summary:
    ```
* - {py:obj}`ApplicationSpecification <algokit_utils.application_specification.ApplicationSpecification>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.ApplicationSpecification
    :parser: myst
    :summary:
    ```
* - {py:obj}`CallConfig <algokit_utils.application_specification.CallConfig>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.CallConfig
    :parser: myst
    :summary:
    ```
* - {py:obj}`CreateCallParameters <algokit_utils.models.CreateCallParameters>`
  - ```{autodoc2-docstring} algokit_utils.models.CreateCallParameters
    :parser: myst
    :summary:
    ```
* - {py:obj}`CreateCallParametersDict <algokit_utils.models.CreateCallParametersDict>`
  - ```{autodoc2-docstring} algokit_utils.models.CreateCallParametersDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`CreateTransactionParameters <algokit_utils.models.CreateTransactionParameters>`
  - ```{autodoc2-docstring} algokit_utils.models.CreateTransactionParameters
    :parser: myst
    :summary:
    ```
* - {py:obj}`DefaultArgumentDict <algokit_utils.application_specification.DefaultArgumentDict>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.DefaultArgumentDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`DeployCallArgs <algokit_utils.deploy.DeployCallArgs>`
  - ```{autodoc2-docstring} algokit_utils.deploy.DeployCallArgs
    :parser: myst
    :summary:
    ```
* - {py:obj}`DeployCallArgsDict <algokit_utils.deploy.DeployCallArgsDict>`
  - ```{autodoc2-docstring} algokit_utils.deploy.DeployCallArgsDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`DeployCreateCallArgs <algokit_utils.deploy.DeployCreateCallArgs>`
  - ```{autodoc2-docstring} algokit_utils.deploy.DeployCreateCallArgs
    :parser: myst
    :summary:
    ```
* - {py:obj}`DeployCreateCallArgsDict <algokit_utils.deploy.DeployCreateCallArgsDict>`
  - ```{autodoc2-docstring} algokit_utils.deploy.DeployCreateCallArgsDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`DeployResponse <algokit_utils.deploy.DeployResponse>`
  - ```{autodoc2-docstring} algokit_utils.deploy.DeployResponse
    :parser: myst
    :summary:
    ```
* - {py:obj}`EnsureBalanceParameters <algokit_utils._ensure_funded.EnsureBalanceParameters>`
  - ```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters
    :parser: myst
    :summary:
    ```
* - {py:obj}`EnsureFundedResponse <algokit_utils._ensure_funded.EnsureFundedResponse>`
  - ```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureFundedResponse
    :parser: myst
    :summary:
    ```
* - {py:obj}`MethodHints <algokit_utils.application_specification.MethodHints>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.MethodHints
    :parser: myst
    :summary:
    ```
* - {py:obj}`OnCompleteCallParameters <algokit_utils.models.OnCompleteCallParameters>`
  - ```{autodoc2-docstring} algokit_utils.models.OnCompleteCallParameters
    :parser: myst
    :summary:
    ```
* - {py:obj}`OnCompleteCallParametersDict <algokit_utils.models.OnCompleteCallParametersDict>`
  - ```{autodoc2-docstring} algokit_utils.models.OnCompleteCallParametersDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`OnSchemaBreak <algokit_utils.deploy.OnSchemaBreak>`
  - ```{autodoc2-docstring} algokit_utils.deploy.OnSchemaBreak
    :parser: myst
    :summary:
    ```
* - {py:obj}`OnUpdate <algokit_utils.deploy.OnUpdate>`
  - ```{autodoc2-docstring} algokit_utils.deploy.OnUpdate
    :parser: myst
    :summary:
    ```
* - {py:obj}`OperationPerformed <algokit_utils.deploy.OperationPerformed>`
  - ```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed
    :parser: myst
    :summary:
    ```
* - {py:obj}`Program <algokit_utils.application_client.Program>`
  - ```{autodoc2-docstring} algokit_utils.application_client.Program
    :parser: myst
    :summary:
    ```
* - {py:obj}`TestNetDispenserApiClient <algokit_utils.dispenser_api.TestNetDispenserApiClient>`
  - ```{autodoc2-docstring} algokit_utils.dispenser_api.TestNetDispenserApiClient
    :parser: myst
    :summary:
    ```
* - {py:obj}`TransactionParameters <algokit_utils.models.TransactionParameters>`
  - ```{autodoc2-docstring} algokit_utils.models.TransactionParameters
    :parser: myst
    :summary:
    ```
* - {py:obj}`TransactionResponse <algokit_utils.models.TransactionResponse>`
  - ```{autodoc2-docstring} algokit_utils.models.TransactionResponse
    :parser: myst
    :summary:
    ```
* - {py:obj}`TransferAssetParameters <algokit_utils._transfer.TransferAssetParameters>`
  - ```{autodoc2-docstring} algokit_utils._transfer.TransferAssetParameters
    :parser: myst
    :summary:
    ```
* - {py:obj}`TransferParameters <algokit_utils._transfer.TransferParameters>`
  - ```{autodoc2-docstring} algokit_utils._transfer.TransferParameters
    :parser: myst
    :summary:
    ```
````

### Functions

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`create_kmd_wallet_account <algokit_utils.account.create_kmd_wallet_account>`
  - ```{autodoc2-docstring} algokit_utils.account.create_kmd_wallet_account
    :parser: myst
    :summary:
    ```
* - {py:obj}`ensure_funded <algokit_utils._ensure_funded.ensure_funded>`
  - ```{autodoc2-docstring} algokit_utils._ensure_funded.ensure_funded
    :parser: myst
    :summary:
    ```
* - {py:obj}`execute_atc_with_logic_error <algokit_utils.application_client.execute_atc_with_logic_error>`
  - ```{autodoc2-docstring} algokit_utils.application_client.execute_atc_with_logic_error
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_account <algokit_utils.account.get_account>`
  - ```{autodoc2-docstring} algokit_utils.account.get_account
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_account_from_mnemonic <algokit_utils.account.get_account_from_mnemonic>`
  - ```{autodoc2-docstring} algokit_utils.account.get_account_from_mnemonic
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_algod_client <algokit_utils.network_clients.get_algod_client>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.get_algod_client
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_app_id_from_tx_id <algokit_utils.deploy.get_app_id_from_tx_id>`
  - ```{autodoc2-docstring} algokit_utils.deploy.get_app_id_from_tx_id
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_creator_apps <algokit_utils.deploy.get_creator_apps>`
  - ```{autodoc2-docstring} algokit_utils.deploy.get_creator_apps
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_default_localnet_config <algokit_utils.network_clients.get_default_localnet_config>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.get_default_localnet_config
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_dispenser_account <algokit_utils.account.get_dispenser_account>`
  - ```{autodoc2-docstring} algokit_utils.account.get_dispenser_account
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_indexer_client <algokit_utils.network_clients.get_indexer_client>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.get_indexer_client
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_kmd_client_from_algod_client <algokit_utils.network_clients.get_kmd_client_from_algod_client>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.get_kmd_client_from_algod_client
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_kmd_wallet_account <algokit_utils.account.get_kmd_wallet_account>`
  - ```{autodoc2-docstring} algokit_utils.account.get_kmd_wallet_account
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_localnet_default_account <algokit_utils.account.get_localnet_default_account>`
  - ```{autodoc2-docstring} algokit_utils.account.get_localnet_default_account
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_next_version <algokit_utils.application_client.get_next_version>`
  - ```{autodoc2-docstring} algokit_utils.application_client.get_next_version
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_or_create_kmd_wallet_account <algokit_utils.account.get_or_create_kmd_wallet_account>`
  - ```{autodoc2-docstring} algokit_utils.account.get_or_create_kmd_wallet_account
    :parser: myst
    :summary:
    ```
* - {py:obj}`get_sender_from_signer <algokit_utils.application_client.get_sender_from_signer>`
  - ```{autodoc2-docstring} algokit_utils.application_client.get_sender_from_signer
    :parser: myst
    :summary:
    ```
* - {py:obj}`is_localnet <algokit_utils.network_clients.is_localnet>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.is_localnet
    :parser: myst
    :summary:
    ```
* - {py:obj}`is_mainnet <algokit_utils.network_clients.is_mainnet>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.is_mainnet
    :parser: myst
    :summary:
    ```
* - {py:obj}`is_testnet <algokit_utils.network_clients.is_testnet>`
  - ```{autodoc2-docstring} algokit_utils.network_clients.is_testnet
    :parser: myst
    :summary:
    ```
* - {py:obj}`num_extra_program_pages <algokit_utils.application_client.num_extra_program_pages>`
  - ```{autodoc2-docstring} algokit_utils.application_client.num_extra_program_pages
    :parser: myst
    :summary:
    ```
* - {py:obj}`replace_template_variables <algokit_utils.deploy.replace_template_variables>`
  - ```{autodoc2-docstring} algokit_utils.deploy.replace_template_variables
    :parser: myst
    :summary:
    ```
* - {py:obj}`transfer <algokit_utils._transfer.transfer>`
  - ```{autodoc2-docstring} algokit_utils._transfer.transfer
    :parser: myst
    :summary:
    ```
* - {py:obj}`transfer_asset <algokit_utils._transfer.transfer_asset>`
  - ```{autodoc2-docstring} algokit_utils._transfer.transfer_asset
    :parser: myst
    :summary:
    ```
````

### Data

````{list-table}
:class: autosummary longtable
:align: left

* - {py:obj}`AppSpecStateDict <algokit_utils.application_specification.AppSpecStateDict>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.AppSpecStateDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`DELETABLE_TEMPLATE_NAME <algokit_utils.deploy.DELETABLE_TEMPLATE_NAME>`
  - ```{autodoc2-docstring} algokit_utils.deploy.DELETABLE_TEMPLATE_NAME
    :parser: myst
    :summary:
    ```
* - {py:obj}`DefaultArgumentType <algokit_utils.application_specification.DefaultArgumentType>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.DefaultArgumentType
    :parser: myst
    :summary:
    ```
* - {py:obj}`MethodConfigDict <algokit_utils.application_specification.MethodConfigDict>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.MethodConfigDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`NOTE_PREFIX <algokit_utils.deploy.NOTE_PREFIX>`
  - ```{autodoc2-docstring} algokit_utils.deploy.NOTE_PREFIX
    :parser: myst
    :summary:
    ```
* - {py:obj}`OnCompleteActionName <algokit_utils.application_specification.OnCompleteActionName>`
  - ```{autodoc2-docstring} algokit_utils.application_specification.OnCompleteActionName
    :parser: myst
    :summary:
    ```
* - {py:obj}`TemplateValueDict <algokit_utils.deploy.TemplateValueDict>`
  - ```{autodoc2-docstring} algokit_utils.deploy.TemplateValueDict
    :parser: myst
    :summary:
    ```
* - {py:obj}`TemplateValueMapping <algokit_utils.deploy.TemplateValueMapping>`
  - ```{autodoc2-docstring} algokit_utils.deploy.TemplateValueMapping
    :parser: myst
    :summary:
    ```
* - {py:obj}`UPDATABLE_TEMPLATE_NAME <algokit_utils.deploy.UPDATABLE_TEMPLATE_NAME>`
  - ```{autodoc2-docstring} algokit_utils.deploy.UPDATABLE_TEMPLATE_NAME
    :parser: myst
    :summary:
    ```
````

### API

````{py:class} ABICallArgs
:canonical: algokit_utils.deploy.ABICallArgs

Bases: {py:obj}`algokit_utils.deploy.DeployCallArgs`, {py:obj}`algokit_utils.deploy.ABICall`

```{autodoc2-docstring} algokit_utils.deploy.ABICallArgs
:parser: myst
```

````

````{py:class} ABICallArgsDict()
:canonical: algokit_utils.deploy.ABICallArgsDict

Bases: {py:obj}`algokit_utils.deploy.DeployCallArgsDict`, {py:obj}`typing.TypedDict`

```{autodoc2-docstring} algokit_utils.deploy.ABICallArgsDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.ABICallArgsDict.__init__
:parser: myst
```

````

````{py:class} ABICreateCallArgs
:canonical: algokit_utils.deploy.ABICreateCallArgs

Bases: {py:obj}`algokit_utils.deploy.DeployCreateCallArgs`, {py:obj}`algokit_utils.deploy.ABICall`

```{autodoc2-docstring} algokit_utils.deploy.ABICreateCallArgs
:parser: myst
```

````

````{py:class} ABICreateCallArgsDict()
:canonical: algokit_utils.deploy.ABICreateCallArgsDict

Bases: {py:obj}`algokit_utils.deploy.DeployCreateCallArgsDict`, {py:obj}`typing.TypedDict`

```{autodoc2-docstring} algokit_utils.deploy.ABICreateCallArgsDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.ABICreateCallArgsDict.__init__
:parser: myst
```

````

`````{py:class} ABITransactionResponse
:canonical: algokit_utils.models.ABITransactionResponse

Bases: {py:obj}`algokit_utils.models.TransactionResponse`, {py:obj}`typing.Generic`\[{py:obj}`algokit_utils.models.ReturnType`\]

```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse
:parser: myst
```

````{py:attribute} decode_error
:canonical: algokit_utils.models.ABITransactionResponse.decode_error
:type: Exception | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse.decode_error
:parser: myst
```

````

````{py:attribute} method
:canonical: algokit_utils.models.ABITransactionResponse.method
:type: algosdk.abi.Method
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse.method
:parser: myst
```

````

````{py:attribute} raw_value
:canonical: algokit_utils.models.ABITransactionResponse.raw_value
:type: bytes
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse.raw_value
:parser: myst
```

````

````{py:attribute} return_value
:canonical: algokit_utils.models.ABITransactionResponse.return_value
:type: algokit_utils.models.ReturnType
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse.return_value
:parser: myst
```

````

````{py:attribute} tx_info
:canonical: algokit_utils.models.ABITransactionResponse.tx_info
:type: dict
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.ABITransactionResponse.tx_info
:parser: myst
```

````

`````

`````{py:class} Account
:canonical: algokit_utils.models.Account

```{autodoc2-docstring} algokit_utils.models.Account
:parser: myst
```

````{py:attribute} address
:canonical: algokit_utils.models.Account.address
:type: str
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.Account.address
:parser: myst
```

````

````{py:attribute} private_key
:canonical: algokit_utils.models.Account.private_key
:type: str
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.Account.private_key
:parser: myst
```

````

````{py:property} public_key
:canonical: algokit_utils.models.Account.public_key
:type: bytes

```{autodoc2-docstring} algokit_utils.models.Account.public_key
:parser: myst
```

````

````{py:property} signer
:canonical: algokit_utils.models.Account.signer
:type: algosdk.atomic_transaction_composer.AccountTransactionSigner

```{autodoc2-docstring} algokit_utils.models.Account.signer
:parser: myst
```

````

`````

`````{py:class} AlgoClientConfig
:canonical: algokit_utils.network_clients.AlgoClientConfig

```{autodoc2-docstring} algokit_utils.network_clients.AlgoClientConfig
:parser: myst
```

````{py:attribute} server
:canonical: algokit_utils.network_clients.AlgoClientConfig.server
:type: str
:value: >
   None

```{autodoc2-docstring} algokit_utils.network_clients.AlgoClientConfig.server
:parser: myst
```

````

````{py:attribute} token
:canonical: algokit_utils.network_clients.AlgoClientConfig.token
:type: str
:value: >
   None

```{autodoc2-docstring} algokit_utils.network_clients.AlgoClientConfig.token
:parser: myst
```

````

`````

````{py:class} AppDeployMetaData
:canonical: algokit_utils.deploy.AppDeployMetaData

```{autodoc2-docstring} algokit_utils.deploy.AppDeployMetaData
:parser: myst
```

````

````{py:class} AppLookup
:canonical: algokit_utils.deploy.AppLookup

```{autodoc2-docstring} algokit_utils.deploy.AppLookup
:parser: myst
```

````

````{py:class} AppMetaData
:canonical: algokit_utils.deploy.AppMetaData

Bases: {py:obj}`algokit_utils.deploy.AppReference`, {py:obj}`algokit_utils.deploy.AppDeployMetaData`

```{autodoc2-docstring} algokit_utils.deploy.AppMetaData
:parser: myst
```

````

````{py:class} AppReference
:canonical: algokit_utils.deploy.AppReference

```{autodoc2-docstring} algokit_utils.deploy.AppReference
:parser: myst
```

````

````{py:data} AppSpecStateDict
:canonical: algokit_utils.application_specification.AppSpecStateDict
:type: typing.TypeAlias
:value: >
   None

```{autodoc2-docstring} algokit_utils.application_specification.AppSpecStateDict
:parser: myst
```

````

`````{py:class} ApplicationClient(algod_client: algosdk.v2client.algod.AlgodClient, app_spec: algokit_utils.application_specification.ApplicationSpecification | pathlib.Path, *, app_id: int = 0, creator: str | algokit_utils.models.Account | None = None, indexer_client: IndexerClient | None = None, existing_deployments: algokit_utils.deploy.AppLookup | None = None, signer: algosdk.atomic_transaction_composer.TransactionSigner | algokit_utils.models.Account | None = None, sender: str | None = None, suggested_params: algosdk.transaction.SuggestedParams | None = None, template_values: algokit_utils.deploy.TemplateValueMapping | None = None, app_name: str | None = None)
:canonical: algokit_utils.application_client.ApplicationClient

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.__init__
:parser: myst
```

````{py:method} add_method_call(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, abi_method: algokit_utils.models.ABIMethod | bool | None = None, *, abi_args: algokit_utils.models.ABIArgsDict | None = None, app_id: int | None = None, parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, on_complete: algosdk.transaction.OnComplete = transaction.OnComplete.NoOpOC, local_schema: algosdk.transaction.StateSchema | None = None, global_schema: algosdk.transaction.StateSchema | None = None, approval_program: bytes | None = None, clear_program: bytes | None = None, extra_pages: int | None = None, app_args: list[bytes] | None = None, call_config: algokit_utils.application_specification.CallConfig = au_spec.CallConfig.CALL) -> None
:canonical: algokit_utils.application_client.ApplicationClient.add_method_call

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.add_method_call
:parser: myst
```

````

````{py:method} call(call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.OnCompleteCallParameters | algokit_utils.models.OnCompleteCallParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> algokit_utils.models.TransactionResponse | algokit_utils.models.ABITransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.call

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.call
:parser: myst
```

````

````{py:method} clear_state(transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, app_args: list[bytes] | None = None) -> algokit_utils.models.TransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.clear_state

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.clear_state
:parser: myst
```

````

````{py:method} close_out(call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> algokit_utils.models.TransactionResponse | algokit_utils.models.ABITransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.close_out

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.close_out
:parser: myst
```

````

````{py:method} compose_call(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.OnCompleteCallParameters | algokit_utils.models.OnCompleteCallParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_call

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_call
:parser: myst
```

````

````{py:method} compose_clear_state(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, app_args: list[bytes] | None = None) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_clear_state

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_clear_state
:parser: myst
```

````

````{py:method} compose_close_out(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_close_out

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_close_out
:parser: myst
```

````

````{py:method} compose_create(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.CreateCallParameters | algokit_utils.models.CreateCallParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_create

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_create
:parser: myst
```

````

````{py:method} compose_delete(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_delete

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_delete
:parser: myst
```

````

````{py:method} compose_opt_in(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_opt_in

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_opt_in
:parser: myst
```

````

````{py:method} compose_update(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, /, call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> None
:canonical: algokit_utils.application_client.ApplicationClient.compose_update

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.compose_update
:parser: myst
```

````

````{py:method} create(call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.CreateCallParameters | algokit_utils.models.CreateCallParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> algokit_utils.models.TransactionResponse | algokit_utils.models.ABITransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.create

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.create
:parser: myst
```

````

````{py:method} delete(call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> algokit_utils.models.TransactionResponse | algokit_utils.models.ABITransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.delete

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.delete
:parser: myst
```

````

````{py:method} deploy(version: str | None = None, *, signer: algosdk.atomic_transaction_composer.TransactionSigner | None = None, sender: str | None = None, allow_update: bool | None = None, allow_delete: bool | None = None, on_update: algokit_utils.deploy.OnUpdate = au_deploy.OnUpdate.Fail, on_schema_break: algokit_utils.deploy.OnSchemaBreak = au_deploy.OnSchemaBreak.Fail, template_values: algokit_utils.deploy.TemplateValueMapping | None = None, create_args: algokit_utils.deploy.ABICreateCallArgs | algokit_utils.deploy.ABICreateCallArgsDict | algokit_utils.deploy.DeployCreateCallArgs | None = None, update_args: algokit_utils.deploy.ABICallArgs | algokit_utils.deploy.ABICallArgsDict | algokit_utils.deploy.DeployCallArgs | None = None, delete_args: algokit_utils.deploy.ABICallArgs | algokit_utils.deploy.ABICallArgsDict | algokit_utils.deploy.DeployCallArgs | None = None) -> algokit_utils.deploy.DeployResponse
:canonical: algokit_utils.application_client.ApplicationClient.deploy

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.deploy
:parser: myst
```

````

````{py:method} export_source_map() -> str | None
:canonical: algokit_utils.application_client.ApplicationClient.export_source_map

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.export_source_map
:parser: myst
```

````

````{py:method} get_global_state(*, raw: bool = False) -> dict[bytes | str, bytes | str | int]
:canonical: algokit_utils.application_client.ApplicationClient.get_global_state

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.get_global_state
:parser: myst
```

````

````{py:method} get_local_state(account: str | None = None, *, raw: bool = False) -> dict[bytes | str, bytes | str | int]
:canonical: algokit_utils.application_client.ApplicationClient.get_local_state

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.get_local_state
:parser: myst
```

````

````{py:method} get_signer_sender(signer: algosdk.atomic_transaction_composer.TransactionSigner | None = None, sender: str | None = None) -> tuple[algosdk.atomic_transaction_composer.TransactionSigner | None, str | None]
:canonical: algokit_utils.application_client.ApplicationClient.get_signer_sender

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.get_signer_sender
:parser: myst
```

````

````{py:method} import_source_map(source_map_json: str) -> None
:canonical: algokit_utils.application_client.ApplicationClient.import_source_map

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.import_source_map
:parser: myst
```

````

````{py:method} opt_in(call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> algokit_utils.models.TransactionResponse | algokit_utils.models.ABITransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.opt_in

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.opt_in
:parser: myst
```

````

````{py:method} prepare(signer: algosdk.atomic_transaction_composer.TransactionSigner | algokit_utils.models.Account | None = None, sender: str | None = None, app_id: int | None = None, template_values: algokit_utils.deploy.TemplateValueDict | None = None) -> algokit_utils.application_client.ApplicationClient
:canonical: algokit_utils.application_client.ApplicationClient.prepare

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.prepare
:parser: myst
```

````

````{py:method} resolve(to_resolve: algokit_utils.application_specification.DefaultArgumentDict) -> int | str | bytes
:canonical: algokit_utils.application_client.ApplicationClient.resolve

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.resolve
:parser: myst
```

````

````{py:method} resolve_signer_sender(signer: algosdk.atomic_transaction_composer.TransactionSigner | None = None, sender: str | None = None) -> tuple[algosdk.atomic_transaction_composer.TransactionSigner, str]
:canonical: algokit_utils.application_client.ApplicationClient.resolve_signer_sender

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.resolve_signer_sender
:parser: myst
```

````

````{py:method} update(call_abi_method: algokit_utils.models.ABIMethod | bool | None = None, transaction_parameters: algokit_utils.models.TransactionParameters | algokit_utils.models.TransactionParametersDict | None = None, **abi_kwargs: algokit_utils.models.ABIArgType) -> algokit_utils.models.TransactionResponse | algokit_utils.models.ABITransactionResponse
:canonical: algokit_utils.application_client.ApplicationClient.update

```{autodoc2-docstring} algokit_utils.application_client.ApplicationClient.update
:parser: myst
```

````

`````

`````{py:class} ApplicationSpecification
:canonical: algokit_utils.application_specification.ApplicationSpecification

```{autodoc2-docstring} algokit_utils.application_specification.ApplicationSpecification
:parser: myst
```

````{py:method} export(directory: pathlib.Path | str | None = None) -> None
:canonical: algokit_utils.application_specification.ApplicationSpecification.export

```{autodoc2-docstring} algokit_utils.application_specification.ApplicationSpecification.export
:parser: myst
```

````

`````

`````{py:class} CallConfig()
:canonical: algokit_utils.application_specification.CallConfig

Bases: {py:obj}`enum.IntFlag`

```{autodoc2-docstring} algokit_utils.application_specification.CallConfig
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.application_specification.CallConfig.__init__
:parser: myst
```

````{py:attribute} ALL
:canonical: algokit_utils.application_specification.CallConfig.ALL
:value: >
   3

```{autodoc2-docstring} algokit_utils.application_specification.CallConfig.ALL
:parser: myst
```

````

````{py:attribute} CALL
:canonical: algokit_utils.application_specification.CallConfig.CALL
:value: >
   1

```{autodoc2-docstring} algokit_utils.application_specification.CallConfig.CALL
:parser: myst
```

````

````{py:attribute} CREATE
:canonical: algokit_utils.application_specification.CallConfig.CREATE
:value: >
   2

```{autodoc2-docstring} algokit_utils.application_specification.CallConfig.CREATE
:parser: myst
```

````

````{py:attribute} NEVER
:canonical: algokit_utils.application_specification.CallConfig.NEVER
:value: >
   0

```{autodoc2-docstring} algokit_utils.application_specification.CallConfig.NEVER
:parser: myst
```

````

`````

````{py:class} CreateCallParameters
:canonical: algokit_utils.models.CreateCallParameters

Bases: {py:obj}`algokit_utils.models.OnCompleteCallParameters`

```{autodoc2-docstring} algokit_utils.models.CreateCallParameters
:parser: myst
```

````

````{py:class} CreateCallParametersDict()
:canonical: algokit_utils.models.CreateCallParametersDict

Bases: {py:obj}`typing.TypedDict`, {py:obj}`algokit_utils.models.OnCompleteCallParametersDict`

```{autodoc2-docstring} algokit_utils.models.CreateCallParametersDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.models.CreateCallParametersDict.__init__
:parser: myst
```

````

````{py:class} CreateTransactionParameters
:canonical: algokit_utils.models.CreateTransactionParameters

Bases: {py:obj}`algokit_utils.models.TransactionParameters`

```{autodoc2-docstring} algokit_utils.models.CreateTransactionParameters
:parser: myst
```

````

````{py:data} DELETABLE_TEMPLATE_NAME
:canonical: algokit_utils.deploy.DELETABLE_TEMPLATE_NAME
:value: >
   None

```{autodoc2-docstring} algokit_utils.deploy.DELETABLE_TEMPLATE_NAME
:parser: myst
```

````

````{py:class} DefaultArgumentDict()
:canonical: algokit_utils.application_specification.DefaultArgumentDict

Bases: {py:obj}`typing.TypedDict`

```{autodoc2-docstring} algokit_utils.application_specification.DefaultArgumentDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.application_specification.DefaultArgumentDict.__init__
:parser: myst
```

````

````{py:data} DefaultArgumentType
:canonical: algokit_utils.application_specification.DefaultArgumentType
:type: typing.TypeAlias
:value: >
   None

```{autodoc2-docstring} algokit_utils.application_specification.DefaultArgumentType
:parser: myst
```

````

````{py:class} DeployCallArgs
:canonical: algokit_utils.deploy.DeployCallArgs

```{autodoc2-docstring} algokit_utils.deploy.DeployCallArgs
:parser: myst
```

````

````{py:class} DeployCallArgsDict()
:canonical: algokit_utils.deploy.DeployCallArgsDict

Bases: {py:obj}`typing.TypedDict`

```{autodoc2-docstring} algokit_utils.deploy.DeployCallArgsDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.DeployCallArgsDict.__init__
:parser: myst
```

````

````{py:class} DeployCreateCallArgs
:canonical: algokit_utils.deploy.DeployCreateCallArgs

Bases: {py:obj}`algokit_utils.deploy.DeployCallArgs`

```{autodoc2-docstring} algokit_utils.deploy.DeployCreateCallArgs
:parser: myst
```

````

````{py:class} DeployCreateCallArgsDict()
:canonical: algokit_utils.deploy.DeployCreateCallArgsDict

Bases: {py:obj}`algokit_utils.deploy.DeployCallArgsDict`, {py:obj}`typing.TypedDict`

```{autodoc2-docstring} algokit_utils.deploy.DeployCreateCallArgsDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.DeployCreateCallArgsDict.__init__
:parser: myst
```

````

````{py:class} DeployResponse
:canonical: algokit_utils.deploy.DeployResponse

```{autodoc2-docstring} algokit_utils.deploy.DeployResponse
:parser: myst
```

````

```{py:exception} DeploymentFailedError()
:canonical: algokit_utils.deploy.DeploymentFailedError

Bases: {py:obj}`Exception`

```

`````{py:class} EnsureBalanceParameters
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters
:parser: myst
```

````{py:attribute} account_to_fund
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.account_to_fund
:type: algokit_utils.models.Account | algosdk.atomic_transaction_composer.AccountTransactionSigner | str
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.account_to_fund
:parser: myst
```

````

````{py:attribute} fee_micro_algos
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.fee_micro_algos
:type: int | None
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.fee_micro_algos
:parser: myst
```

````

````{py:attribute} funding_source
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.funding_source
:type: algokit_utils.models.Account | algosdk.atomic_transaction_composer.AccountTransactionSigner | algokit_utils.dispenser_api.TestNetDispenserApiClient | None
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.funding_source
:parser: myst
```

````

````{py:attribute} max_fee_micro_algos
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.max_fee_micro_algos
:type: int | None
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.max_fee_micro_algos
:parser: myst
```

````

````{py:attribute} min_funding_increment_micro_algos
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.min_funding_increment_micro_algos
:type: int
:value: >
   0

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.min_funding_increment_micro_algos
:parser: myst
```

````

````{py:attribute} min_spending_balance_micro_algos
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.min_spending_balance_micro_algos
:type: int
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.min_spending_balance_micro_algos
:parser: myst
```

````

````{py:attribute} note
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.note
:type: str | bytes | None
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.note
:parser: myst
```

````

````{py:attribute} suggested_params
:canonical: algokit_utils._ensure_funded.EnsureBalanceParameters.suggested_params
:type: algosdk.transaction.SuggestedParams | None
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureBalanceParameters.suggested_params
:parser: myst
```

````

`````

`````{py:class} EnsureFundedResponse
:canonical: algokit_utils._ensure_funded.EnsureFundedResponse

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureFundedResponse
:parser: myst
```

````{py:attribute} transaction_id
:canonical: algokit_utils._ensure_funded.EnsureFundedResponse.transaction_id
:type: str
:value: >
   None

```{autodoc2-docstring} algokit_utils._ensure_funded.EnsureFundedResponse.transaction_id
:parser: myst
```

````

`````

```{py:exception} LogicError(*, logic_error_str: str, program: str, source_map: AlgoSourceMap | None, transaction_id: str, message: str, pc: int, logic_error: Exception | None = None, traces: list | None = None)
:canonical: algokit_utils.logic_error.LogicError

Bases: {py:obj}`Exception`

```

````{py:data} MethodConfigDict
:canonical: algokit_utils.application_specification.MethodConfigDict
:type: typing.TypeAlias
:value: >
   None

```{autodoc2-docstring} algokit_utils.application_specification.MethodConfigDict
:parser: myst
```

````

````{py:class} MethodHints
:canonical: algokit_utils.application_specification.MethodHints

```{autodoc2-docstring} algokit_utils.application_specification.MethodHints
:parser: myst
```

````

````{py:data} NOTE_PREFIX
:canonical: algokit_utils.deploy.NOTE_PREFIX
:value: >
   'ALGOKIT_DEPLOYER:j'

```{autodoc2-docstring} algokit_utils.deploy.NOTE_PREFIX
:parser: myst
```

````

````{py:data} OnCompleteActionName
:canonical: algokit_utils.application_specification.OnCompleteActionName
:type: typing.TypeAlias
:value: >
   None

```{autodoc2-docstring} algokit_utils.application_specification.OnCompleteActionName
:parser: myst
```

````

````{py:class} OnCompleteCallParameters
:canonical: algokit_utils.models.OnCompleteCallParameters

Bases: {py:obj}`algokit_utils.models.TransactionParameters`

```{autodoc2-docstring} algokit_utils.models.OnCompleteCallParameters
:parser: myst
```

````

````{py:class} OnCompleteCallParametersDict()
:canonical: algokit_utils.models.OnCompleteCallParametersDict

Bases: {py:obj}`typing.TypedDict`, {py:obj}`algokit_utils.models.TransactionParametersDict`

```{autodoc2-docstring} algokit_utils.models.OnCompleteCallParametersDict
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.models.OnCompleteCallParametersDict.__init__
:parser: myst
```

````

`````{py:class} OnSchemaBreak(*args, **kwds)
:canonical: algokit_utils.deploy.OnSchemaBreak

Bases: {py:obj}`enum.Enum`

```{autodoc2-docstring} algokit_utils.deploy.OnSchemaBreak
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.OnSchemaBreak.__init__
:parser: myst
```

````{py:attribute} AppendApp
:canonical: algokit_utils.deploy.OnSchemaBreak.AppendApp
:value: >
   3

```{autodoc2-docstring} algokit_utils.deploy.OnSchemaBreak.AppendApp
:parser: myst
```

````

````{py:attribute} Fail
:canonical: algokit_utils.deploy.OnSchemaBreak.Fail
:value: >
   0

```{autodoc2-docstring} algokit_utils.deploy.OnSchemaBreak.Fail
:parser: myst
```

````

````{py:attribute} ReplaceApp
:canonical: algokit_utils.deploy.OnSchemaBreak.ReplaceApp
:value: >
   2

```{autodoc2-docstring} algokit_utils.deploy.OnSchemaBreak.ReplaceApp
:parser: myst
```

````

`````

`````{py:class} OnUpdate(*args, **kwds)
:canonical: algokit_utils.deploy.OnUpdate

Bases: {py:obj}`enum.Enum`

```{autodoc2-docstring} algokit_utils.deploy.OnUpdate
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.OnUpdate.__init__
:parser: myst
```

````{py:attribute} AppendApp
:canonical: algokit_utils.deploy.OnUpdate.AppendApp
:value: >
   3

```{autodoc2-docstring} algokit_utils.deploy.OnUpdate.AppendApp
:parser: myst
```

````

````{py:attribute} Fail
:canonical: algokit_utils.deploy.OnUpdate.Fail
:value: >
   0

```{autodoc2-docstring} algokit_utils.deploy.OnUpdate.Fail
:parser: myst
```

````

````{py:attribute} ReplaceApp
:canonical: algokit_utils.deploy.OnUpdate.ReplaceApp
:value: >
   2

```{autodoc2-docstring} algokit_utils.deploy.OnUpdate.ReplaceApp
:parser: myst
```

````

````{py:attribute} UpdateApp
:canonical: algokit_utils.deploy.OnUpdate.UpdateApp
:value: >
   1

```{autodoc2-docstring} algokit_utils.deploy.OnUpdate.UpdateApp
:parser: myst
```

````

`````

`````{py:class} OperationPerformed(*args, **kwds)
:canonical: algokit_utils.deploy.OperationPerformed

Bases: {py:obj}`enum.Enum`

```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed.__init__
:parser: myst
```

````{py:attribute} Create
:canonical: algokit_utils.deploy.OperationPerformed.Create
:value: >
   1

```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed.Create
:parser: myst
```

````

````{py:attribute} Nothing
:canonical: algokit_utils.deploy.OperationPerformed.Nothing
:value: >
   0

```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed.Nothing
:parser: myst
```

````

````{py:attribute} Replace
:canonical: algokit_utils.deploy.OperationPerformed.Replace
:value: >
   3

```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed.Replace
:parser: myst
```

````

````{py:attribute} Update
:canonical: algokit_utils.deploy.OperationPerformed.Update
:value: >
   2

```{autodoc2-docstring} algokit_utils.deploy.OperationPerformed.Update
:parser: myst
```

````

`````

````{py:class} Program(program: str, client: algosdk.v2client.algod.AlgodClient)
:canonical: algokit_utils.application_client.Program

```{autodoc2-docstring} algokit_utils.application_client.Program
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.application_client.Program.__init__
:parser: myst
```

````

````{py:data} TemplateValueDict
:canonical: algokit_utils.deploy.TemplateValueDict
:type: typing.TypeAlias
:value: >
   None

```{autodoc2-docstring} algokit_utils.deploy.TemplateValueDict
:parser: myst
```

````

````{py:data} TemplateValueMapping
:canonical: algokit_utils.deploy.TemplateValueMapping
:type: typing.TypeAlias
:value: >
   None

```{autodoc2-docstring} algokit_utils.deploy.TemplateValueMapping
:parser: myst
```

````

`````{py:class} TestNetDispenserApiClient(auth_token: str | None = None, request_timeout: int = DISPENSER_REQUEST_TIMEOUT)
:canonical: algokit_utils.dispenser_api.TestNetDispenserApiClient

```{autodoc2-docstring} algokit_utils.dispenser_api.TestNetDispenserApiClient
:parser: myst
```

```{rubric} Initialization
```

```{autodoc2-docstring} algokit_utils.dispenser_api.TestNetDispenserApiClient.__init__
:parser: myst
```

````{py:method} fund(address: str, amount: int, asset_id: int) -> algokit_utils.dispenser_api.DispenserFundResponse
:canonical: algokit_utils.dispenser_api.TestNetDispenserApiClient.fund

```{autodoc2-docstring} algokit_utils.dispenser_api.TestNetDispenserApiClient.fund
:parser: myst
```

````

````{py:method} get_limit(address: str) -> algokit_utils.dispenser_api.DispenserLimitResponse
:canonical: algokit_utils.dispenser_api.TestNetDispenserApiClient.get_limit

```{autodoc2-docstring} algokit_utils.dispenser_api.TestNetDispenserApiClient.get_limit
:parser: myst
```

````

````{py:method} refund(refund_txn_id: str) -> None
:canonical: algokit_utils.dispenser_api.TestNetDispenserApiClient.refund

```{autodoc2-docstring} algokit_utils.dispenser_api.TestNetDispenserApiClient.refund
:parser: myst
```

````

`````

`````{py:class} TransactionParameters
:canonical: algokit_utils.models.TransactionParameters

```{autodoc2-docstring} algokit_utils.models.TransactionParameters
:parser: myst
```

````{py:attribute} accounts
:canonical: algokit_utils.models.TransactionParameters.accounts
:type: list[str] | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.accounts
:parser: myst
```

````

````{py:attribute} boxes
:canonical: algokit_utils.models.TransactionParameters.boxes
:type: collections.abc.Sequence[tuple[int, bytes | bytearray | str | int]] | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.boxes
:parser: myst
```

````

````{py:attribute} foreign_apps
:canonical: algokit_utils.models.TransactionParameters.foreign_apps
:type: list[int] | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.foreign_apps
:parser: myst
```

````

````{py:attribute} foreign_assets
:canonical: algokit_utils.models.TransactionParameters.foreign_assets
:type: list[int] | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.foreign_assets
:parser: myst
```

````

````{py:attribute} lease
:canonical: algokit_utils.models.TransactionParameters.lease
:type: bytes | str | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.lease
:parser: myst
```

````

````{py:attribute} note
:canonical: algokit_utils.models.TransactionParameters.note
:type: bytes | str | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.note
:parser: myst
```

````

````{py:attribute} rekey_to
:canonical: algokit_utils.models.TransactionParameters.rekey_to
:type: str | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.rekey_to
:parser: myst
```

````

````{py:attribute} sender
:canonical: algokit_utils.models.TransactionParameters.sender
:type: str | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.sender
:parser: myst
```

````

````{py:attribute} signer
:canonical: algokit_utils.models.TransactionParameters.signer
:type: algosdk.atomic_transaction_composer.TransactionSigner | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.signer
:parser: myst
```

````

````{py:attribute} suggested_params
:canonical: algokit_utils.models.TransactionParameters.suggested_params
:type: algosdk.transaction.SuggestedParams | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionParameters.suggested_params
:parser: myst
```

````

`````

`````{py:class} TransactionResponse
:canonical: algokit_utils.models.TransactionResponse

```{autodoc2-docstring} algokit_utils.models.TransactionResponse
:parser: myst
```

````{py:attribute} confirmed_round
:canonical: algokit_utils.models.TransactionResponse.confirmed_round
:type: int | None
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionResponse.confirmed_round
:parser: myst
```

````

````{py:method} from_atr(result: algosdk.atomic_transaction_composer.AtomicTransactionResponse | algosdk.atomic_transaction_composer.SimulateAtomicTransactionResponse, transaction_index: int = -1) -> algokit_utils.models.TransactionResponse
:canonical: algokit_utils.models.TransactionResponse.from_atr
:staticmethod:

```{autodoc2-docstring} algokit_utils.models.TransactionResponse.from_atr
:parser: myst
```

````

````{py:attribute} tx_id
:canonical: algokit_utils.models.TransactionResponse.tx_id
:type: str
:value: >
   None

```{autodoc2-docstring} algokit_utils.models.TransactionResponse.tx_id
:parser: myst
```

````

`````

````{py:class} TransferAssetParameters
:canonical: algokit_utils._transfer.TransferAssetParameters

Bases: {py:obj}`algokit_utils._transfer.TransferParametersBase`

```{autodoc2-docstring} algokit_utils._transfer.TransferAssetParameters
:parser: myst
```

````

````{py:class} TransferParameters
:canonical: algokit_utils._transfer.TransferParameters

Bases: {py:obj}`algokit_utils._transfer.TransferParametersBase`

```{autodoc2-docstring} algokit_utils._transfer.TransferParameters
:parser: myst
```

````

````{py:data} UPDATABLE_TEMPLATE_NAME
:canonical: algokit_utils.deploy.UPDATABLE_TEMPLATE_NAME
:value: >
   None

```{autodoc2-docstring} algokit_utils.deploy.UPDATABLE_TEMPLATE_NAME
:parser: myst
```

````

````{py:function} create_kmd_wallet_account(kmd_client: algosdk.kmd.KMDClient, name: str) -> algokit_utils.models.Account
:canonical: algokit_utils.account.create_kmd_wallet_account

```{autodoc2-docstring} algokit_utils.account.create_kmd_wallet_account
:parser: myst
```
````

````{py:function} ensure_funded(client: algosdk.v2client.algod.AlgodClient, parameters: algokit_utils._ensure_funded.EnsureBalanceParameters) -> algokit_utils._ensure_funded.EnsureFundedResponse | None
:canonical: algokit_utils._ensure_funded.ensure_funded

```{autodoc2-docstring} algokit_utils._ensure_funded.ensure_funded
:parser: myst
```
````

````{py:function} execute_atc_with_logic_error(atc: algosdk.atomic_transaction_composer.AtomicTransactionComposer, algod_client: algosdk.v2client.algod.AlgodClient, approval_program: str, wait_rounds: int = 4, approval_source_map: algosdk.source_map.SourceMap | typing.Callable[[], algosdk.source_map.SourceMap | None] | None = None) -> algosdk.atomic_transaction_composer.AtomicTransactionResponse
:canonical: algokit_utils.application_client.execute_atc_with_logic_error

```{autodoc2-docstring} algokit_utils.application_client.execute_atc_with_logic_error
:parser: myst
```
````

````{py:function} get_account(client: algosdk.v2client.algod.AlgodClient, name: str, fund_with_algos: float = 1000, kmd_client: KMDClient | None = None) -> algokit_utils.models.Account
:canonical: algokit_utils.account.get_account

```{autodoc2-docstring} algokit_utils.account.get_account
:parser: myst
```
````

````{py:function} get_account_from_mnemonic(mnemonic: str) -> algokit_utils.models.Account
:canonical: algokit_utils.account.get_account_from_mnemonic

```{autodoc2-docstring} algokit_utils.account.get_account_from_mnemonic
:parser: myst
```
````

````{py:function} get_algod_client(config: algokit_utils.network_clients.AlgoClientConfig | None = None) -> algosdk.v2client.algod.AlgodClient
:canonical: algokit_utils.network_clients.get_algod_client

```{autodoc2-docstring} algokit_utils.network_clients.get_algod_client
:parser: myst
```
````

````{py:function} get_app_id_from_tx_id(algod_client: algosdk.v2client.algod.AlgodClient, tx_id: str) -> int
:canonical: algokit_utils.deploy.get_app_id_from_tx_id

```{autodoc2-docstring} algokit_utils.deploy.get_app_id_from_tx_id
:parser: myst
```
````

````{py:function} get_creator_apps(indexer: algosdk.v2client.indexer.IndexerClient, creator_account: algokit_utils.models.Account | str) -> algokit_utils.deploy.AppLookup
:canonical: algokit_utils.deploy.get_creator_apps

```{autodoc2-docstring} algokit_utils.deploy.get_creator_apps
:parser: myst
```
````

````{py:function} get_default_localnet_config(config: typing.Literal[algod, indexer, kmd]) -> algokit_utils.network_clients.AlgoClientConfig
:canonical: algokit_utils.network_clients.get_default_localnet_config

```{autodoc2-docstring} algokit_utils.network_clients.get_default_localnet_config
:parser: myst
```
````

````{py:function} get_dispenser_account(client: algosdk.v2client.algod.AlgodClient) -> algokit_utils.models.Account
:canonical: algokit_utils.account.get_dispenser_account

```{autodoc2-docstring} algokit_utils.account.get_dispenser_account
:parser: myst
```
````

````{py:function} get_indexer_client(config: algokit_utils.network_clients.AlgoClientConfig | None = None) -> algosdk.v2client.indexer.IndexerClient
:canonical: algokit_utils.network_clients.get_indexer_client

```{autodoc2-docstring} algokit_utils.network_clients.get_indexer_client
:parser: myst
```
````

````{py:function} get_kmd_client_from_algod_client(client: algosdk.v2client.algod.AlgodClient) -> algosdk.kmd.KMDClient
:canonical: algokit_utils.network_clients.get_kmd_client_from_algod_client

```{autodoc2-docstring} algokit_utils.network_clients.get_kmd_client_from_algod_client
:parser: myst
```
````

````{py:function} get_kmd_wallet_account(client: algosdk.v2client.algod.AlgodClient, kmd_client: algosdk.kmd.KMDClient, name: str, predicate: Callable[[dict[str, Any]], bool] | None = None) -> algokit_utils.models.Account | None
:canonical: algokit_utils.account.get_kmd_wallet_account

```{autodoc2-docstring} algokit_utils.account.get_kmd_wallet_account
:parser: myst
```
````

````{py:function} get_localnet_default_account(client: algosdk.v2client.algod.AlgodClient) -> algokit_utils.models.Account
:canonical: algokit_utils.account.get_localnet_default_account

```{autodoc2-docstring} algokit_utils.account.get_localnet_default_account
:parser: myst
```
````

````{py:function} get_next_version(current_version: str) -> str
:canonical: algokit_utils.application_client.get_next_version

```{autodoc2-docstring} algokit_utils.application_client.get_next_version
:parser: myst
```
````

````{py:function} get_or_create_kmd_wallet_account(client: algosdk.v2client.algod.AlgodClient, name: str, fund_with_algos: float = 1000, kmd_client: KMDClient | None = None) -> algokit_utils.models.Account
:canonical: algokit_utils.account.get_or_create_kmd_wallet_account

```{autodoc2-docstring} algokit_utils.account.get_or_create_kmd_wallet_account
:parser: myst
```
````

````{py:function} get_sender_from_signer(signer: algosdk.atomic_transaction_composer.TransactionSigner | None) -> str | None
:canonical: algokit_utils.application_client.get_sender_from_signer

```{autodoc2-docstring} algokit_utils.application_client.get_sender_from_signer
:parser: myst
```
````

````{py:function} is_localnet(client: algosdk.v2client.algod.AlgodClient) -> bool
:canonical: algokit_utils.network_clients.is_localnet

```{autodoc2-docstring} algokit_utils.network_clients.is_localnet
:parser: myst
```
````

````{py:function} is_mainnet(client: algosdk.v2client.algod.AlgodClient) -> bool
:canonical: algokit_utils.network_clients.is_mainnet

```{autodoc2-docstring} algokit_utils.network_clients.is_mainnet
:parser: myst
```
````

````{py:function} is_testnet(client: algosdk.v2client.algod.AlgodClient) -> bool
:canonical: algokit_utils.network_clients.is_testnet

```{autodoc2-docstring} algokit_utils.network_clients.is_testnet
:parser: myst
```
````

````{py:function} num_extra_program_pages(approval: bytes, clear: bytes) -> int
:canonical: algokit_utils.application_client.num_extra_program_pages

```{autodoc2-docstring} algokit_utils.application_client.num_extra_program_pages
:parser: myst
```
````

````{py:function} replace_template_variables(program: str, template_values: algokit_utils.deploy.TemplateValueMapping) -> str
:canonical: algokit_utils.deploy.replace_template_variables

```{autodoc2-docstring} algokit_utils.deploy.replace_template_variables
:parser: myst
```
````

````{py:function} transfer(client: algosdk.v2client.algod.AlgodClient, parameters: algokit_utils._transfer.TransferParameters) -> algosdk.transaction.PaymentTxn
:canonical: algokit_utils._transfer.transfer

```{autodoc2-docstring} algokit_utils._transfer.transfer
:parser: myst
```
````

````{py:function} transfer_asset(client: algosdk.v2client.algod.AlgodClient, parameters: algokit_utils._transfer.TransferAssetParameters) -> algosdk.transaction.AssetTransferTxn
:canonical: algokit_utils._transfer.transfer_asset

```{autodoc2-docstring} algokit_utils._transfer.transfer_asset
:parser: myst
```
````
